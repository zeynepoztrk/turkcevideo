
turkcevideo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040dc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00006058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d4  080042d4  00006058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d4  080042d4  000052d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042d8  080042d8  000052d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  080042dc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000058  08004334  00006058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004334  0000615c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c44f  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f2  00000000  00000000  000124d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  000147d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c1  00000000  00000000  00015330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021758  00000000  00000000  00015bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e410  00000000  00000000  00037349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdd14  00000000  00000000  00045759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011346d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d9c  00000000  00000000  001134b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0011624c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000058 	.word	0x20000058
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004288 	.word	0x08004288

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000005c 	.word	0x2000005c
 8000200:	08004288 	.word	0x08004288

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000538:	4b22      	ldr	r3, [pc, #136]	@ (80005c4 <WIZCHIP_READ+0x94>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800053e:	4b21      	ldr	r3, [pc, #132]	@ (80005c4 <WIZCHIP_READ+0x94>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000544:	4b1f      	ldr	r3, [pc, #124]	@ (80005c4 <WIZCHIP_READ+0x94>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000548:	2b00      	cmp	r3, #0
 800054a:	d003      	beq.n	8000554 <WIZCHIP_READ+0x24>
 800054c:	4b1d      	ldr	r3, [pc, #116]	@ (80005c4 <WIZCHIP_READ+0x94>)
 800054e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000550:	2b00      	cmp	r3, #0
 8000552:	d114      	bne.n	800057e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000554:	4b1b      	ldr	r3, [pc, #108]	@ (80005c4 <WIZCHIP_READ+0x94>)
 8000556:	6a1b      	ldr	r3, [r3, #32]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	0c12      	lsrs	r2, r2, #16
 800055c:	b2d2      	uxtb	r2, r2
 800055e:	4610      	mov	r0, r2
 8000560:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000562:	4b18      	ldr	r3, [pc, #96]	@ (80005c4 <WIZCHIP_READ+0x94>)
 8000564:	6a1b      	ldr	r3, [r3, #32]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	0a12      	lsrs	r2, r2, #8
 800056a:	b2d2      	uxtb	r2, r2
 800056c:	4610      	mov	r0, r2
 800056e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <WIZCHIP_READ+0x94>)
 8000572:	6a1b      	ldr	r3, [r3, #32]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	b2d2      	uxtb	r2, r2
 8000578:	4610      	mov	r0, r2
 800057a:	4798      	blx	r3
 800057c:	e011      	b.n	80005a2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	0c1b      	lsrs	r3, r3, #16
 8000582:	b2db      	uxtb	r3, r3
 8000584:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	b2db      	uxtb	r3, r3
 800058c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <WIZCHIP_READ+0x94>)
 8000596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000598:	f107 020c 	add.w	r2, r7, #12
 800059c:	2103      	movs	r1, #3
 800059e:	4610      	mov	r0, r2
 80005a0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80005a2:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <WIZCHIP_READ+0x94>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4798      	blx	r3
 80005a8:	4603      	mov	r3, r0
 80005aa:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <WIZCHIP_READ+0x94>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80005b2:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <WIZCHIP_READ+0x94>)
 80005b4:	691b      	ldr	r3, [r3, #16]
 80005b6:	4798      	blx	r3
   return ret;
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000004 	.word	0x20000004

080005c8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005da:	4b21      	ldr	r3, [pc, #132]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 80005ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d119      	bne.n	8000624 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80005f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	0c12      	lsrs	r2, r2, #16
 80005f8:	b2d2      	uxtb	r2, r2
 80005fa:	4610      	mov	r0, r2
 80005fc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 8000600:	6a1b      	ldr	r3, [r3, #32]
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	0a12      	lsrs	r2, r2, #8
 8000606:	b2d2      	uxtb	r2, r2
 8000608:	4610      	mov	r0, r2
 800060a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	4610      	mov	r0, r2
 8000616:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 800061a:	6a1b      	ldr	r3, [r3, #32]
 800061c:	78fa      	ldrb	r2, [r7, #3]
 800061e:	4610      	mov	r0, r2
 8000620:	4798      	blx	r3
 8000622:	e013      	b.n	800064c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	0c1b      	lsrs	r3, r3, #16
 8000628:	b2db      	uxtb	r3, r3
 800062a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0a1b      	lsrs	r3, r3, #8
 8000630:	b2db      	uxtb	r3, r3
 8000632:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 8000640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000642:	f107 020c 	add.w	r2, r7, #12
 8000646:	2104      	movs	r1, #4
 8000648:	4610      	mov	r0, r2
 800064a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000652:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <WIZCHIP_WRITE+0x98>)
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	4798      	blx	r3
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000004 	.word	0x20000004

08000664 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	4613      	mov	r3, r2
 8000670:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000672:	4b2b      	ldr	r3, [pc, #172]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000678:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800067e:	4b28      	ldr	r3, [pc, #160]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 8000680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000682:	2b00      	cmp	r3, #0
 8000684:	d003      	beq.n	800068e <WIZCHIP_READ_BUF+0x2a>
 8000686:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 8000688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800068a:	2b00      	cmp	r3, #0
 800068c:	d126      	bne.n	80006dc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800068e:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 8000690:	6a1b      	ldr	r3, [r3, #32]
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	0c12      	lsrs	r2, r2, #16
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	4610      	mov	r0, r2
 800069a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800069c:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 800069e:	6a1b      	ldr	r3, [r3, #32]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	0a12      	lsrs	r2, r2, #8
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	4610      	mov	r0, r2
 80006a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 80006ac:	6a1b      	ldr	r3, [r3, #32]
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	4610      	mov	r0, r2
 80006b4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	82fb      	strh	r3, [r7, #22]
 80006ba:	e00a      	b.n	80006d2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80006bc:	4b18      	ldr	r3, [pc, #96]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	8afa      	ldrh	r2, [r7, #22]
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	188c      	adds	r4, r1, r2
 80006c6:	4798      	blx	r3
 80006c8:	4603      	mov	r3, r0
 80006ca:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80006cc:	8afb      	ldrh	r3, [r7, #22]
 80006ce:	3301      	adds	r3, #1
 80006d0:	82fb      	strh	r3, [r7, #22]
 80006d2:	8afa      	ldrh	r2, [r7, #22]
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3f0      	bcc.n	80006bc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80006da:	e017      	b.n	800070c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	0c1b      	lsrs	r3, r3, #16
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 80006f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006f6:	f107 0210 	add.w	r2, r7, #16
 80006fa:	2103      	movs	r1, #3
 80006fc:	4610      	mov	r0, r2
 80006fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 8000702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000704:	88fa      	ldrh	r2, [r7, #6]
 8000706:	4611      	mov	r1, r2
 8000708:	68b8      	ldr	r0, [r7, #8]
 800070a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000712:	4b03      	ldr	r3, [pc, #12]	@ (8000720 <WIZCHIP_READ_BUF+0xbc>)
 8000714:	691b      	ldr	r3, [r3, #16]
 8000716:	4798      	blx	r3
}
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	20000004 	.word	0x20000004

08000724 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	4613      	mov	r3, r2
 8000730:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000732:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000738:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800074a:	2b00      	cmp	r3, #0
 800074c:	d126      	bne.n	800079c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	0c12      	lsrs	r2, r2, #16
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	4610      	mov	r0, r2
 800075a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800075c:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 800075e:	6a1b      	ldr	r3, [r3, #32]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	0a12      	lsrs	r2, r2, #8
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	4610      	mov	r0, r2
 8000768:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 800076c:	6a1b      	ldr	r3, [r3, #32]
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	4610      	mov	r0, r2
 8000774:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	82fb      	strh	r3, [r7, #22]
 800077a:	e00a      	b.n	8000792 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	8afa      	ldrh	r2, [r7, #22]
 8000782:	68b9      	ldr	r1, [r7, #8]
 8000784:	440a      	add	r2, r1
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	4610      	mov	r0, r2
 800078a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800078c:	8afb      	ldrh	r3, [r7, #22]
 800078e:	3301      	adds	r3, #1
 8000790:	82fb      	strh	r3, [r7, #22]
 8000792:	8afa      	ldrh	r2, [r7, #22]
 8000794:	88fb      	ldrh	r3, [r7, #6]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3f0      	bcc.n	800077c <WIZCHIP_WRITE_BUF+0x58>
 800079a:	e017      	b.n	80007cc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	0a1b      	lsrs	r3, r3, #8
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 80007b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007b6:	f107 0210 	add.w	r2, r7, #16
 80007ba:	2103      	movs	r1, #3
 80007bc:	4610      	mov	r0, r2
 80007be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 80007c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80007c4:	88fa      	ldrh	r2, [r7, #6]
 80007c6:	4611      	mov	r1, r2
 80007c8:	68b8      	ldr	r0, [r7, #8]
 80007ca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80007d2:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <WIZCHIP_WRITE_BUF+0xbc>)
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	4798      	blx	r3
}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000004 	.word	0x20000004

080007e4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	81fb      	strh	r3, [r7, #14]
 80007f2:	2300      	movs	r3, #0
 80007f4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	3301      	adds	r3, #1
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe94 	bl	8000530 <WIZCHIP_READ>
 8000808:	4603      	mov	r3, r0
 800080a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800080c:	89bb      	ldrh	r3, [r7, #12]
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	b29c      	uxth	r4, r3
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	3301      	adds	r3, #1
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff fe86 	bl	8000530 <WIZCHIP_READ>
 8000824:	4603      	mov	r3, r0
 8000826:	4423      	add	r3, r4
 8000828:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800082a:	89bb      	ldrh	r3, [r7, #12]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d019      	beq.n	8000864 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	3301      	adds	r3, #1
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fe77 	bl	8000530 <WIZCHIP_READ>
 8000842:	4603      	mov	r3, r0
 8000844:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000846:	89fb      	ldrh	r3, [r7, #14]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	b29c      	uxth	r4, r3
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	3301      	adds	r3, #1
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe69 	bl	8000530 <WIZCHIP_READ>
 800085e:	4603      	mov	r3, r0
 8000860:	4423      	add	r3, r4
 8000862:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000864:	89fa      	ldrh	r2, [r7, #14]
 8000866:	89bb      	ldrh	r3, [r7, #12]
 8000868:	429a      	cmp	r2, r3
 800086a:	d1c4      	bne.n	80007f6 <getSn_TX_FSR+0x12>
   return val;
 800086c:	89fb      	ldrh	r3, [r7, #14]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bd90      	pop	{r4, r7, pc}

08000876 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000876:	b590      	push	{r4, r7, lr}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	4603      	mov	r3, r0
 800087e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000880:	2300      	movs	r3, #0
 8000882:	81fb      	strh	r3, [r7, #14]
 8000884:	2300      	movs	r3, #0
 8000886:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	3301      	adds	r3, #1
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe4b 	bl	8000530 <WIZCHIP_READ>
 800089a:	4603      	mov	r3, r0
 800089c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800089e:	89bb      	ldrh	r3, [r7, #12]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b29c      	uxth	r4, r3
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	3301      	adds	r3, #1
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe3d 	bl	8000530 <WIZCHIP_READ>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4423      	add	r3, r4
 80008ba:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80008bc:	89bb      	ldrh	r3, [r7, #12]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d019      	beq.n	80008f6 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	3301      	adds	r3, #1
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fe2e 	bl	8000530 <WIZCHIP_READ>
 80008d4:	4603      	mov	r3, r0
 80008d6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80008d8:	89fb      	ldrh	r3, [r7, #14]
 80008da:	021b      	lsls	r3, r3, #8
 80008dc:	b29c      	uxth	r4, r3
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	3301      	adds	r3, #1
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe20 	bl	8000530 <WIZCHIP_READ>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4423      	add	r3, r4
 80008f4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80008f6:	89fa      	ldrh	r2, [r7, #14]
 80008f8:	89bb      	ldrh	r3, [r7, #12]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d1c4      	bne.n	8000888 <getSn_RX_RSR+0x12>
   return val;
 80008fe:	89fb      	ldrh	r3, [r7, #14]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bd90      	pop	{r4, r7, pc}

08000908 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8000920:	88bb      	ldrh	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d046      	beq.n	80009b4 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	3301      	adds	r3, #1
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fdfc 	bl	8000530 <WIZCHIP_READ>
 8000938:	4603      	mov	r3, r0
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b29c      	uxth	r4, r3
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3301      	adds	r3, #1
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fdf0 	bl	8000530 <WIZCHIP_READ>
 8000950:	4603      	mov	r3, r0
 8000952:	4423      	add	r3, r4
 8000954:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000956:	89fb      	ldrh	r3, [r7, #14]
 8000958:	021a      	lsls	r2, r3, #8
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	3302      	adds	r3, #2
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	4413      	add	r3, r2
 8000964:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000966:	88bb      	ldrh	r3, [r7, #4]
 8000968:	461a      	mov	r2, r3
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	68b8      	ldr	r0, [r7, #8]
 800096e:	f7ff fed9 	bl	8000724 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000972:	89fa      	ldrh	r2, [r7, #14]
 8000974:	88bb      	ldrh	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	3301      	adds	r3, #1
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8000986:	461a      	mov	r2, r3
 8000988:	89fb      	ldrh	r3, [r7, #14]
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b29b      	uxth	r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	4619      	mov	r1, r3
 8000992:	4610      	mov	r0, r2
 8000994:	f7ff fe18 	bl	80005c8 <WIZCHIP_WRITE>
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	3301      	adds	r3, #1
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80009a4:	461a      	mov	r2, r3
 80009a6:	89fb      	ldrh	r3, [r7, #14]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	4610      	mov	r0, r2
 80009ae:	f7ff fe0b 	bl	80005c8 <WIZCHIP_WRITE>
 80009b2:	e000      	b.n	80009b6 <wiz_send_data+0xae>
   if(len == 0)  return;
 80009b4:	bf00      	nop
}
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}

080009bc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d046      	beq.n	8000a68 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	3301      	adds	r3, #1
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fda2 	bl	8000530 <WIZCHIP_READ>
 80009ec:	4603      	mov	r3, r0
 80009ee:	021b      	lsls	r3, r3, #8
 80009f0:	b29c      	uxth	r4, r3
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	3301      	adds	r3, #1
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd96 	bl	8000530 <WIZCHIP_READ>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4423      	add	r3, r4
 8000a08:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000a0a:	89fb      	ldrh	r3, [r7, #14]
 8000a0c:	021a      	lsls	r2, r3, #8
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	3303      	adds	r3, #3
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	4413      	add	r3, r2
 8000a18:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000a1a:	88bb      	ldrh	r3, [r7, #4]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	68b8      	ldr	r0, [r7, #8]
 8000a22:	f7ff fe1f 	bl	8000664 <WIZCHIP_READ_BUF>
   ptr += len;
 8000a26:	89fa      	ldrh	r2, [r7, #14]
 8000a28:	88bb      	ldrh	r3, [r7, #4]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	3301      	adds	r3, #1
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	4619      	mov	r1, r3
 8000a46:	4610      	mov	r0, r2
 8000a48:	f7ff fdbe 	bl	80005c8 <WIZCHIP_WRITE>
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	3301      	adds	r3, #1
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8000a58:	461a      	mov	r2, r3
 8000a5a:	89fb      	ldrh	r3, [r7, #14]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4610      	mov	r0, r2
 8000a62:	f7ff fdb1 	bl	80005c8 <WIZCHIP_WRITE>
 8000a66:	e000      	b.n	8000a6a <wiz_recv_data+0xae>
   if(len == 0) return;
 8000a68:	bf00      	nop
}
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}

08000a70 <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b089      	sub	sp, #36	@ 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4604      	mov	r4, r0
 8000a78:	4608      	mov	r0, r1
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	71fb      	strb	r3, [r7, #7]
 8000a82:	4603      	mov	r3, r0
 8000a84:	71bb      	strb	r3, [r7, #6]
 8000a86:	460b      	mov	r3, r1
 8000a88:	80bb      	strh	r3, [r7, #4]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b07      	cmp	r3, #7
 8000a96:	d902      	bls.n	8000a9e <socket+0x2e>
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	e10d      	b.n	8000cba <socket+0x24a>
   switch (protocol & 0x0F)
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	f003 030f 	and.w	r3, r3, #15
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	2b0d      	cmp	r3, #13
 8000aa8:	d82c      	bhi.n	8000b04 <socket+0x94>
 8000aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <socket+0x40>)
 8000aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab0:	08000ae9 	.word	0x08000ae9
 8000ab4:	08000b0b 	.word	0x08000b0b
 8000ab8:	08000b0b 	.word	0x08000b0b
 8000abc:	08000b0b 	.word	0x08000b0b
 8000ac0:	08000b05 	.word	0x08000b05
 8000ac4:	08000b05 	.word	0x08000b05
 8000ac8:	08000b05 	.word	0x08000b05
 8000acc:	08000b05 	.word	0x08000b05
 8000ad0:	08000b05 	.word	0x08000b05
 8000ad4:	08000b0b 	.word	0x08000b0b
 8000ad8:	08000b0b 	.word	0x08000b0b
 8000adc:	08000b05 	.word	0x08000b05
 8000ae0:	08000b05 	.word	0x08000b05
 8000ae4:	08000b0b 	.word	0x08000b0b
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	2204      	movs	r2, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8000af4:	f7ff fdb6 	bl	8000664 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d107      	bne.n	8000b0e <socket+0x9e>
 8000afe:	f06f 0302 	mvn.w	r3, #2
 8000b02:	e0da      	b.n	8000cba <socket+0x24a>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 8000b04:	f06f 0304 	mvn.w	r3, #4
 8000b08:	e0d7      	b.n	8000cba <socket+0x24a>
         break; 
 8000b0a:	bf00      	nop
 8000b0c:	e000      	b.n	8000b10 <socket+0xa0>
            break;
 8000b0e:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <socket+0xb0>
 8000b1a:	f06f 0305 	mvn.w	r3, #5
 8000b1e:	e0cc      	b.n	8000cba <socket+0x24a>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d028      	beq.n	8000b78 <socket+0x108>
   {
      switch(protocol)
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d002      	beq.n	8000b32 <socket+0xc2>
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d008      	beq.n	8000b42 <socket+0xd2>
         break;

#endif 

         default:
            break;
 8000b30:	e022      	b.n	8000b78 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000b32:	78fb      	ldrb	r3, [r7, #3]
 8000b34:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11a      	bne.n	8000b72 <socket+0x102>
 8000b3c:	f06f 0305 	mvn.w	r3, #5
 8000b40:	e0bb      	b.n	8000cba <socket+0x24a>
   	      if(flag & SF_IGMP_VER2)
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db02      	blt.n	8000b5a <socket+0xea>
 8000b54:	f06f 0305 	mvn.w	r3, #5
 8000b58:	e0af      	b.n	8000cba <socket+0x24a>
      	      if(flag & SF_UNI_BLOCK)
 8000b5a:	78fb      	ldrb	r3, [r7, #3]
 8000b5c:	f003 0310 	and.w	r3, r3, #16
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d008      	beq.n	8000b76 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db04      	blt.n	8000b76 <socket+0x106>
 8000b6c:	f06f 0305 	mvn.w	r3, #5
 8000b70:	e0a3      	b.n	8000cba <socket+0x24a>
   	      break;
 8000b72:	bf00      	nop
 8000b74:	e000      	b.n	8000b78 <socket+0x108>
         break;
 8000b76:	bf00      	nop
      }
   }
   close(sn);
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f8ac 	bl	8000cd8 <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	3301      	adds	r3, #1
 8000b86:	00d8      	lsls	r0, r3, #3
 8000b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b8c:	f023 030f 	bic.w	r3, r3, #15
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f7ff fd13 	bl	80005c8 <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d110      	bne.n	8000bca <socket+0x15a>
   {
      port = sock_any_port++;
 8000ba8:	4b46      	ldr	r3, [pc, #280]	@ (8000cc4 <socket+0x254>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	b291      	uxth	r1, r2
 8000bb0:	4a44      	ldr	r2, [pc, #272]	@ (8000cc4 <socket+0x254>)
 8000bb2:	8011      	strh	r1, [r2, #0]
 8000bb4:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000bb6:	4b43      	ldr	r3, [pc, #268]	@ (8000cc4 <socket+0x254>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d103      	bne.n	8000bca <socket+0x15a>
 8000bc2:	4b40      	ldr	r3, [pc, #256]	@ (8000cc4 <socket+0x254>)
 8000bc4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8000bc8:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	88bb      	ldrh	r3, [r7, #4]
 8000bda:	0a1b      	lsrs	r3, r3, #8
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4619      	mov	r1, r3
 8000be2:	4610      	mov	r0, r2
 8000be4:	f7ff fcf0 	bl	80005c8 <WIZCHIP_WRITE>
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	3301      	adds	r3, #1
 8000bee:	00db      	lsls	r3, r3, #3
 8000bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	f7ff fce3 	bl	80005c8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	3301      	adds	r3, #1
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c0e:	2101      	movs	r1, #1
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fcd9 	bl	80005c8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000c16:	bf00      	nop
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fc83 	bl	8000530 <WIZCHIP_READ>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d1f3      	bne.n	8000c18 <socket+0x1a8>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2201      	movs	r2, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	4b22      	ldr	r3, [pc, #136]	@ (8000cc8 <socket+0x258>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	b21b      	sxth	r3, r3
 8000c44:	4013      	ands	r3, r2
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <socket+0x258>)
 8000c4c:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	f003 0201 	and.w	r2, r3, #1
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	b21a      	sxth	r2, r3
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <socket+0x258>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <socket+0x258>)
 8000c6a:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <socket+0x25c>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	4013      	ands	r3, r2
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <socket+0x25c>)
 8000c88:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a10      	ldr	r2, [pc, #64]	@ (8000cd0 <socket+0x260>)
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <socket+0x264>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000c9c:	bf00      	nop
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff fc40 	bl	8000530 <WIZCHIP_READ>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f3      	beq.n	8000c9e <socket+0x22e>
   return (int8_t)sn;
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd90      	pop	{r4, r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000074 	.word	0x20000074
 8000ccc:	20000076 	.word	0x20000076
 8000cd0:	20000078 	.word	0x20000078
 8000cd4:	20000088 	.word	0x20000088

08000cd8 <close>:

int8_t close(uint8_t sn)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b07      	cmp	r3, #7
 8000ce6:	d902      	bls.n	8000cee <close+0x16>
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	e055      	b.n	8000d9a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fc63 	bl	80005c8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 8000d02:	bf00      	nop
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	3301      	adds	r3, #1
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fc0d 	bl	8000530 <WIZCHIP_READ>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f3      	bne.n	8000d04 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	3301      	adds	r3, #1
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d28:	211f      	movs	r1, #31
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fc4c 	bl	80005c8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	2201      	movs	r2, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <close+0xcc>)
 8000d40:	881b      	ldrh	r3, [r3, #0]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4013      	ands	r3, r2
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <close+0xcc>)
 8000d4c:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2201      	movs	r2, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <close+0xd0>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4013      	ands	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <close+0xd0>)
 8000d6a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dac <close+0xd4>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <close+0xd8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 8000d7e:	bf00      	nop
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	3301      	adds	r3, #1
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fbcf 	bl	8000530 <WIZCHIP_READ>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f3      	bne.n	8000d80 <close+0xa8>
   return SOCK_OK;
 8000d98:	2301      	movs	r3, #1
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000074 	.word	0x20000074
 8000da8:	20000076 	.word	0x20000076
 8000dac:	20000078 	.word	0x20000078
 8000db0:	20000088 	.word	0x20000088

08000db4 <connect_W5x00>:
      return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
//int8_t connect (uint8_t sn, uint8_t * addr, uint16_t port )
int8_t connect_W5x00(uint8_t sn, uint8_t * addr, uint16_t port  ){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	80bb      	strh	r3, [r7, #4]
   // printf(" W5x00 - connect - addrlen = %d \r\n" , 4 );
   // #ifdef IPV6_AVAILABLE
   // TODO :define how to work, when IPV6_AVAILABLE is defined
   // #endif 
   return connect_IO_6(sn , addr , port, 4 );
 8000dc4:	88ba      	ldrh	r2, [r7, #4]
 8000dc6:	79f8      	ldrb	r0, [r7, #7]
 8000dc8:	2304      	movs	r3, #4
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	f000 f806 	bl	8000ddc <connect_IO_6>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <connect_IO_6>:
   // #endif 
   return connect_IO_6(sn , addr , port ,addrlen );
}

static int8_t connect_IO_6 (uint8_t sn, uint8_t * addr, uint16_t port, uint8_t addrlen )
{ 
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6039      	str	r1, [r7, #0]
 8000de4:	4611      	mov	r1, r2
 8000de6:	461a      	mov	r2, r3
 8000de8:	4603      	mov	r3, r0
 8000dea:	71fb      	strb	r3, [r7, #7]
 8000dec:	460b      	mov	r3, r1
 8000dee:	80bb      	strh	r3, [r7, #4]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]

   // printf(" connect - addrlen = %d \r\n" , addrlen );

   CHECK_SOCKNUM();
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b07      	cmp	r3, #7
 8000df8:	d902      	bls.n	8000e00 <connect_IO_6+0x24>
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	e0d9      	b.n	8000fb4 <connect_IO_6+0x1d8>
   CHECK_TCPMODE(); // same macro " CHECK_SOCKMODE(Sn_MR_TCP);"
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	3301      	adds	r3, #1
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fb91 	bl	8000530 <WIZCHIP_READ>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d002      	beq.n	8000e1e <connect_IO_6+0x42>
 8000e18:	f06f 0304 	mvn.w	r3, #4
 8000e1c:	e0ca      	b.n	8000fb4 <connect_IO_6+0x1d8>
   CHECK_SOCKINIT();
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	3301      	adds	r3, #1
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fb80 	bl	8000530 <WIZCHIP_READ>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b13      	cmp	r3, #19
 8000e34:	d002      	beq.n	8000e3c <connect_IO_6+0x60>
 8000e36:	f06f 0302 	mvn.w	r3, #2
 8000e3a:	e0bb      	b.n	8000fb4 <connect_IO_6+0x1d8>
#else
//M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
   uint32_t taddr;
   taddr = ((uint32_t)addr[0] & 0x000000FF);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	3201      	adds	r2, #1
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	683a      	ldr	r2, [r7, #0]
 8000e56:	3202      	adds	r2, #2
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	3203      	adds	r2, #3
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
   if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e72:	d002      	beq.n	8000e7a <connect_IO_6+0x9e>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d102      	bne.n	8000e80 <connect_IO_6+0xa4>
 8000e7a:	f06f 030b 	mvn.w	r3, #11
 8000e7e:	e099      	b.n	8000fb4 <connect_IO_6+0x1d8>
   }
   #endif 

   if(port == 0) return SOCKERR_PORTZERO;
 8000e80:	88bb      	ldrh	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <connect_IO_6+0xb0>
 8000e86:	f06f 030a 	mvn.w	r3, #10
 8000e8a:	e093      	b.n	8000fb4 <connect_IO_6+0x1d8>

   setSn_DPORTR(sn, port);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	3301      	adds	r3, #1
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000e98:	461a      	mov	r2, r3
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	f7ff fb8f 	bl	80005c8 <WIZCHIP_WRITE>
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	3301      	adds	r3, #1
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	f7ff fb82 	bl	80005c8 <WIZCHIP_WRITE>
  
   if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	2b10      	cmp	r3, #16
 8000ec8:	d102      	bne.n	8000ed0 <connect_IO_6+0xf4>
         setSn_DIP6R(sn,addr);
         setSn_CR(sn,Sn_CR_CONNECT6);
      }
      else 
#endif 
      return SOCKERR_SOCKMODE;
 8000eca:	f06f 0304 	mvn.w	r3, #4
 8000ece:	e071      	b.n	8000fb4 <connect_IO_6+0x1d8>
   } 
   else           // addrlen=4, Sn_MR_TCP4(0001), Sn_MR_TCPD(1101)
   {
      if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fb29 	bl	8000530 <WIZCHIP_READ>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d102      	bne.n	8000eea <connect_IO_6+0x10e>
 8000ee4:	f06f 0304 	mvn.w	r3, #4
 8000ee8:	e064      	b.n	8000fb4 <connect_IO_6+0x1d8>
      setSn_DIPR(sn,addr);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	3301      	adds	r3, #1
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	6839      	ldr	r1, [r7, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fc12 	bl	8000724 <WIZCHIP_WRITE_BUF>
	   //setSn_DPORT(sn,port); //TODO::need verify:LINAN 20250421
      setSn_CR(sn,Sn_CR_CONNECT);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	3301      	adds	r3, #1
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb5a 	bl	80005c8 <WIZCHIP_WRITE>
   }
   while(getSn_CR(sn));
 8000f14:	bf00      	nop
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb04 	bl	8000530 <WIZCHIP_READ>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f3      	bne.n	8000f16 <connect_IO_6+0x13a>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8000f2e:	4b23      	ldr	r3, [pc, #140]	@ (8000fbc <connect_IO_6+0x1e0>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	fa42 f303 	asr.w	r3, r2, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d02b      	beq.n	8000f9a <connect_IO_6+0x1be>
 8000f42:	2300      	movs	r3, #0
 8000f44:	e036      	b.n	8000fb4 <connect_IO_6+0x1d8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff faec 	bl	8000530 <WIZCHIP_READ>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00c      	beq.n	8000f7c <connect_IO_6+0x1a0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	3301      	adds	r3, #1
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f6e:	2108      	movs	r1, #8
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fb29 	bl	80005c8 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8000f76:	f06f 030c 	mvn.w	r3, #12
 8000f7a:	e01b      	b.n	8000fb4 <connect_IO_6+0x1d8>
      }

      if (getSn_SR(sn) == SOCK_CLOSED)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	3301      	adds	r3, #1
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fad1 	bl	8000530 <WIZCHIP_READ>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <connect_IO_6+0x1be>
      {
         return SOCKERR_SOCKCLOSED;
 8000f94:	f06f 0303 	mvn.w	r3, #3
 8000f98:	e00c      	b.n	8000fb4 <connect_IO_6+0x1d8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fac2 	bl	8000530 <WIZCHIP_READ>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b17      	cmp	r3, #23
 8000fb0:	d1c9      	bne.n	8000f46 <connect_IO_6+0x16a>
      }
   } 
   
   return SOCK_OK;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000074 	.word	0x20000074

08000fc0 <send>:
}


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	d902      	bls.n	8000fe4 <send+0x24>
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	e138      	b.n	8001256 <send+0x296>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	3301      	adds	r3, #1
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa9f 	bl	8000530 <WIZCHIP_READ>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d002      	beq.n	8001002 <send+0x42>
 8000ffc:	f06f 0304 	mvn.w	r3, #4
 8001000:	e129      	b.n	8001256 <send+0x296>
   CHECK_SOCKDATA();
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d102      	bne.n	800100e <send+0x4e>
 8001008:	f06f 030d 	mvn.w	r3, #13
 800100c:	e123      	b.n	8001256 <send+0x296>
   tmp = getSn_SR(sn);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	3301      	adds	r3, #1
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa88 	bl	8000530 <WIZCHIP_READ>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	2b17      	cmp	r3, #23
 8001028:	d005      	beq.n	8001036 <send+0x76>
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b1c      	cmp	r3, #28
 800102e:	d002      	beq.n	8001036 <send+0x76>
 8001030:	f06f 0306 	mvn.w	r3, #6
 8001034:	e10f      	b.n	8001256 <send+0x296>
   if( sock_is_sending & (1<<sn) )
 8001036:	4b8a      	ldr	r3, [pc, #552]	@ (8001260 <send+0x2a0>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	fa42 f303 	asr.w	r3, r2, r3
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d039      	beq.n	80010be <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	3301      	adds	r3, #1
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa6a 	bl	8000530 <WIZCHIP_READ>
 800105c:	4603      	mov	r3, r0
 800105e:	f003 031f 	and.w	r3, r3, #31
 8001062:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	f003 0310 	and.w	r3, r3, #16
 800106a:	2b00      	cmp	r3, #0
 800106c:	d019      	beq.n	80010a2 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	3301      	adds	r3, #1
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800107a:	2110      	movs	r1, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff faa3 	bl	80005c8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	b21b      	sxth	r3, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b73      	ldr	r3, [pc, #460]	@ (8001260 <send+0x2a0>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4013      	ands	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b70      	ldr	r3, [pc, #448]	@ (8001260 <send+0x2a0>)
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	e00d      	b.n	80010be <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f003 0308 	and.w	r3, r3, #8
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <send+0xfa>
      {
         close(sn);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fe12 	bl	8000cd8 <close>
         return SOCKERR_TIMEOUT;
 80010b4:	f06f 030c 	mvn.w	r3, #12
 80010b8:	e0cd      	b.n	8001256 <send+0x296>
      }
      else return SOCK_BUSY;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e0cb      	b.n	8001256 <send+0x296>
   }
#endif 
   freesize = getSn_TxMAX(sn);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	3301      	adds	r3, #1
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa30 	bl	8000530 <WIZCHIP_READ>
 80010d0:	4603      	mov	r3, r0
 80010d2:	029b      	lsls	r3, r3, #10
 80010d4:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80010d6:	88ba      	ldrh	r2, [r7, #4]
 80010d8:	89bb      	ldrh	r3, [r7, #12]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d901      	bls.n	80010e2 <send+0x122>
 80010de:	89bb      	ldrh	r3, [r7, #12]
 80010e0:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fb7d 	bl	80007e4 <getSn_TX_FSR>
 80010ea:	4603      	mov	r3, r0
 80010ec:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	3301      	adds	r3, #1
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa18 	bl	8000530 <WIZCHIP_READ>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b17      	cmp	r3, #23
 8001108:	d00c      	beq.n	8001124 <send+0x164>
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b1c      	cmp	r3, #28
 800110e:	d009      	beq.n	8001124 <send+0x164>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d103      	bne.n	800111e <send+0x15e>
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fddd 	bl	8000cd8 <close>
         return SOCKERR_SOCKSTATUS;
 800111e:	f06f 0306 	mvn.w	r3, #6
 8001122:	e098      	b.n	8001256 <send+0x296>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8001124:	4b4f      	ldr	r3, [pc, #316]	@ (8001264 <send+0x2a4>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	fa42 f303 	asr.w	r3, r2, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <send+0x184>
 8001138:	88ba      	ldrh	r2, [r7, #4]
 800113a:	89bb      	ldrh	r3, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d901      	bls.n	8001144 <send+0x184>
 8001140:	2300      	movs	r3, #0
 8001142:	e088      	b.n	8001256 <send+0x296>
     // if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  //TODO::need verify:LINAN 20250421
      if(len <= freesize) break;
 8001144:	88ba      	ldrh	r2, [r7, #4]
 8001146:	89bb      	ldrh	r3, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d900      	bls.n	800114e <send+0x18e>
      freesize = (uint16_t)getSn_TX_FSR(sn);
 800114c:	e7c9      	b.n	80010e2 <send+0x122>
      if(len <= freesize) break;
 800114e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff fbd6 	bl	8000908 <wiz_send_data>
#endif

#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn,len);
#endif
   if(sock_is_sending & (1<<sn))
 800115c:	4b40      	ldr	r3, [pc, #256]	@ (8001260 <send+0x2a0>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	fa42 f303 	asr.w	r3, r2, r3
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d04d      	beq.n	800120c <send+0x24c>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8001170:	e034      	b.n	80011dc <send+0x21c>
      {    
         tmp = getSn_SR(sn);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	3301      	adds	r3, #1
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9d6 	bl	8000530 <WIZCHIP_READ>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b17      	cmp	r3, #23
 800118c:	d01a      	beq.n	80011c4 <send+0x204>
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b1c      	cmp	r3, #28
 8001192:	d017      	beq.n	80011c4 <send+0x204>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00d      	beq.n	80011b6 <send+0x1f6>
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	3301      	adds	r3, #1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9c2 	bl	8000530 <WIZCHIP_READ>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <send+0x1fe>
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fd8d 	bl	8000cd8 <close>
            return SOCKERR_SOCKSTATUS;
 80011be:	f06f 0306 	mvn.w	r3, #6
 80011c2:	e048      	b.n	8001256 <send+0x296>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <send+0x2a4>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	fa42 f303 	asr.w	r3, r2, r3
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <send+0x21c>
 80011d8:	2300      	movs	r3, #0
 80011da:	e03c      	b.n	8001256 <send+0x296>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	3301      	adds	r3, #1
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9a1 	bl	8000530 <WIZCHIP_READ>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0bc      	beq.n	8001172 <send+0x1b2>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	3301      	adds	r3, #1
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001204:	2110      	movs	r1, #16
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f9de 	bl	80005c8 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	3301      	adds	r3, #1
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001218:	2120      	movs	r1, #32
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f9d4 	bl	80005c8 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8001220:	bf00      	nop
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	3301      	adds	r3, #1
 8001228:	00db      	lsls	r3, r3, #3
 800122a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f97e 	bl	8000530 <WIZCHIP_READ>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f3      	bne.n	8001222 <send+0x262>
   sock_is_sending |= (1<<sn);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2201      	movs	r2, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	b21a      	sxth	r2, r3
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <send+0x2a0>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <send+0x2a0>)
 8001252:	801a      	strh	r2, [r3, #0]
 
   return len;
 8001254:	88bb      	ldrh	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000076 	.word	0x20000076
 8001264:	20000074 	.word	0x20000074

08001268 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b07      	cmp	r3, #7
 8001284:	d902      	bls.n	800128c <recv+0x24>
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	e098      	b.n	80013be <recv+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	3301      	adds	r3, #1
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f94b 	bl	8000530 <WIZCHIP_READ>
 800129a:	4603      	mov	r3, r0
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d002      	beq.n	80012aa <recv+0x42>
 80012a4:	f06f 0304 	mvn.w	r3, #4
 80012a8:	e089      	b.n	80013be <recv+0x156>
   CHECK_SOCKDATA();
 80012aa:	88bb      	ldrh	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <recv+0x4e>
 80012b0:	f06f 030d 	mvn.w	r3, #13
 80012b4:	e083      	b.n	80013be <recv+0x156>
   
   recvsize = getSn_RxMAX(sn); 
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	3301      	adds	r3, #1
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f934 	bl	8000530 <WIZCHIP_READ>
 80012c8:	4603      	mov	r3, r0
 80012ca:	029b      	lsls	r3, r3, #10
 80012cc:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80012ce:	89ba      	ldrh	r2, [r7, #12]
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d201      	bcs.n	80012da <recv+0x72>
 80012d6:	89bb      	ldrh	r3, [r7, #12]
 80012d8:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff faca 	bl	8000876 <getSn_RX_RSR>
 80012e2:	4603      	mov	r3, r0
 80012e4:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	3301      	adds	r3, #1
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f91c 	bl	8000530 <WIZCHIP_READ>
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	2b17      	cmp	r3, #23
 8001300:	d026      	beq.n	8001350 <recv+0xe8>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	2b1c      	cmp	r3, #28
 8001306:	d11c      	bne.n	8001342 <recv+0xda>
         {
            if(recvsize != 0) break;
 8001308:	89bb      	ldrh	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d130      	bne.n	8001370 <recv+0x108>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fa67 	bl	80007e4 <getSn_TX_FSR>
 8001316:	4603      	mov	r3, r0
 8001318:	461c      	mov	r4, r3
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	3301      	adds	r3, #1
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f902 	bl	8000530 <WIZCHIP_READ>
 800132c:	4603      	mov	r3, r0
 800132e:	029b      	lsls	r3, r3, #10
 8001330:	429c      	cmp	r4, r3
 8001332:	d10d      	bne.n	8001350 <recv+0xe8>
            {
               close(sn);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fcce 	bl	8000cd8 <close>
               return SOCKERR_SOCKSTATUS;
 800133c:	f06f 0306 	mvn.w	r3, #6
 8001340:	e03d      	b.n	80013be <recv+0x156>
            }
         }
         else
         {
            close(sn);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fcc7 	bl	8000cd8 <close>
            return SOCKERR_SOCKSTATUS;
 800134a:	f06f 0306 	mvn.w	r3, #6
 800134e:	e036      	b.n	80013be <recv+0x156>
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <recv+0x160>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	fa42 f303 	asr.w	r3, r2, r3
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <recv+0x100>
 8001364:	2300      	movs	r3, #0
 8001366:	e02a      	b.n	80013be <recv+0x156>
      if(recvsize != 0) break;
 8001368:	89bb      	ldrh	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d102      	bne.n	8001374 <recv+0x10c>
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 800136e:	e7b4      	b.n	80012da <recv+0x72>
            if(recvsize != 0) break;
 8001370:	bf00      	nop
 8001372:	e000      	b.n	8001376 <recv+0x10e>
      if(recvsize != 0) break;
 8001374:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;
 8001376:	89ba      	ldrh	r2, [r7, #12]
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d201      	bcs.n	8001382 <recv+0x11a>
 800137e:	89bb      	ldrh	r3, [r7, #12]
 8001380:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8001382:	88ba      	ldrh	r2, [r7, #4]
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb17 	bl	80009bc <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	3301      	adds	r3, #1
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800139a:	2140      	movs	r1, #64	@ 0x40
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f913 	bl	80005c8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 80013a2:	bf00      	nop
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	3301      	adds	r3, #1
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f8bd 	bl	8000530 <WIZCHIP_READ>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f3      	bne.n	80013a4 <recv+0x13c>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80013bc:	88bb      	ldrh	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000074 	.word	0x20000074

080013cc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	70fb      	strb	r3, [r7, #3]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	78fa      	ldrb	r2, [r7, #3]
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
 8001440:	2300      	movs	r3, #0
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <reg_wizchip_cs_cbfunc+0x16>
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d106      	bne.n	8001488 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <reg_wizchip_cs_cbfunc+0x40>)
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <reg_wizchip_cs_cbfunc+0x44>)
 800147e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <reg_wizchip_cs_cbfunc+0x40>)
 8001482:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <reg_wizchip_cs_cbfunc+0x48>)
 8001484:	619a      	str	r2, [r3, #24]
 8001486:	e006      	b.n	8001496 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <reg_wizchip_cs_cbfunc+0x40>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <reg_wizchip_cs_cbfunc+0x40>)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6193      	str	r3, [r2, #24]
   }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000004 	.word	0x20000004
 80014a8:	080013e9 	.word	0x080013e9
 80014ac:	080013f7 	.word	0x080013f7

080014b0 <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80014ba:	bf00      	nop
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <reg_wizchip_spi_cbfunc+0x4c>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f9      	beq.n	80014bc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d002      	beq.n	80014d4 <reg_wizchip_spi_cbfunc+0x24>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <reg_wizchip_spi_cbfunc+0x4c>)
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <reg_wizchip_spi_cbfunc+0x50>)
 80014d8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <reg_wizchip_spi_cbfunc+0x4c>)
 80014dc:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <reg_wizchip_spi_cbfunc+0x54>)
 80014de:	621a      	str	r2, [r3, #32]
 80014e0:	e006      	b.n	80014f0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80014e2:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <reg_wizchip_spi_cbfunc+0x4c>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <reg_wizchip_spi_cbfunc+0x4c>)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	6213      	str	r3, [r2, #32]
   }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	20000004 	.word	0x20000004
 8001500:	0800143d 	.word	0x0800143d
 8001504:	0800144d 	.word	0x0800144d

08001508 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	2206      	movs	r2, #6
 8001512:	4619      	mov	r1, r3
 8001514:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001518:	f7ff f8a4 	bl	8000664 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2204      	movs	r2, #4
 8001522:	4619      	mov	r1, r3
 8001524:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001528:	f7ff f89c 	bl	8000664 <WIZCHIP_READ_BUF>
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2204      	movs	r2, #4
 8001532:	4619      	mov	r1, r3
 8001534:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001538:	f7ff f894 	bl	8000664 <WIZCHIP_READ_BUF>
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2204      	movs	r2, #4
 8001542:	4619      	mov	r1, r3
 8001544:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001548:	f7ff f88c 	bl	8000664 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800154c:	2180      	movs	r1, #128	@ 0x80
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff f83a 	bl	80005c8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001554:	2000      	movs	r0, #0
 8001556:	f7fe ffeb 	bl	8000530 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2206      	movs	r2, #6
 800155e:	4619      	mov	r1, r3
 8001560:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001564:	f7ff f8de 	bl	8000724 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2204      	movs	r2, #4
 800156e:	4619      	mov	r1, r3
 8001570:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001574:	f7ff f8d6 	bl	8000724 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2204      	movs	r2, #4
 800157e:	4619      	mov	r1, r3
 8001580:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001584:	f7ff f8ce 	bl	8000724 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2204      	movs	r2, #4
 800158e:	4619      	mov	r1, r3
 8001590:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001594:	f7ff f8c6 	bl	8000724 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8001598:	bf00      	nop
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80015ae:	f7ff ffab 	bl	8001508 <wizchip_sw_reset>
   if(txsize)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d03b      	beq.n	8001630 <wizchip_init+0x90>
   {
      tmp = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	e015      	b.n	80015ee <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	7bbb      	ldrb	r3, [r7, #14]
 80015ce:	4413      	add	r3, r2
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 80015d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80015d8:	2b10      	cmp	r3, #16
 80015da:	dd02      	ble.n	80015e2 <wizchip_init+0x42>
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
 80015e0:	e066      	b.n	80016b0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	3301      	adds	r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f2:	2b07      	cmp	r3, #7
 80015f4:	dde5      	ble.n	80015c2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
 80015fa:	e015      	b.n	8001628 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80015fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	3301      	adds	r3, #1
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800160a:	4618      	mov	r0, r3
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	4413      	add	r3, r2
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	f7fe ffd6 	bl	80005c8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800161c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3301      	adds	r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162c:	2b07      	cmp	r3, #7
 800162e:	dde5      	ble.n	80015fc <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03b      	beq.n	80016ae <wizchip_init+0x10e>
   {
      tmp = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e015      	b.n	800166c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	4413      	add	r3, r2
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	7bbb      	ldrb	r3, [r7, #14]
 800164c:	4413      	add	r3, r2
 800164e:	b2db      	uxtb	r3, r3
 8001650:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001656:	2b10      	cmp	r3, #16
 8001658:	dd02      	ble.n	8001660 <wizchip_init+0xc0>
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e027      	b.n	80016b0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	3301      	adds	r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001670:	2b07      	cmp	r3, #7
 8001672:	dde5      	ble.n	8001640 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e015      	b.n	80016a6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800167a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	3301      	adds	r3, #1
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001688:	4618      	mov	r0, r3
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4413      	add	r3, r2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f7fe ff97 	bl	80005c8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	3301      	adds	r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	2b07      	cmp	r3, #7
 80016ac:	dde5      	ble.n	800167a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2206      	movs	r2, #6
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80016ca:	f7ff f82b 	bl	8000724 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	330e      	adds	r3, #14
 80016d2:	2204      	movs	r2, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016da:	f7ff f823 	bl	8000724 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	330a      	adds	r3, #10
 80016e2:	2204      	movs	r2, #4
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80016ea:	f7ff f81b 	bl	8000724 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3306      	adds	r3, #6
 80016f2:	2204      	movs	r2, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80016fa:	f7ff f813 	bl	8000724 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7c9a      	ldrb	r2, [r3, #18]
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <wizchip_setnetinfo+0x78>)
 8001704:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7cda      	ldrb	r2, [r3, #19]
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <wizchip_setnetinfo+0x78>)
 800170c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7d1a      	ldrb	r2, [r3, #20]
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <wizchip_setnetinfo+0x78>)
 8001714:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7d5a      	ldrb	r2, [r3, #21]
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <wizchip_setnetinfo+0x78>)
 800171c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7d9a      	ldrb	r2, [r3, #22]
 8001722:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <wizchip_setnetinfo+0x7c>)
 8001724:	701a      	strb	r2, [r3, #0]
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000090 	.word	0x20000090
 8001734:	20000094 	.word	0x20000094

08001738 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2206      	movs	r2, #6
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800174a:	f7fe ff8b 	bl	8000664 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	330e      	adds	r3, #14
 8001752:	2204      	movs	r2, #4
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800175a:	f7fe ff83 	bl	8000664 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	330a      	adds	r3, #10
 8001762:	2204      	movs	r2, #4
 8001764:	4619      	mov	r1, r3
 8001766:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800176a:	f7fe ff7b 	bl	8000664 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3306      	adds	r3, #6
 8001772:	2204      	movs	r2, #4
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800177a:	f7fe ff73 	bl	8000664 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800177e:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <wizchip_getnetinfo+0x78>)
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <wizchip_getnetinfo+0x78>)
 8001788:	785a      	ldrb	r2, [r3, #1]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800178e:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <wizchip_getnetinfo+0x78>)
 8001790:	789a      	ldrb	r2, [r3, #2]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <wizchip_getnetinfo+0x78>)
 8001798:	78da      	ldrb	r2, [r3, #3]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <wizchip_getnetinfo+0x7c>)
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	759a      	strb	r2, [r3, #22]
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000090 	.word	0x20000090
 80017b4:	20000094 	.word	0x20000094

080017b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <MX_GPIO_Init+0xd0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001888 <MX_GPIO_Init+0xd0>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <MX_GPIO_Init+0xd0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <MX_GPIO_Init+0xd0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a25      	ldr	r2, [pc, #148]	@ (8001888 <MX_GPIO_Init+0xd0>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b1f      	ldr	r3, [pc, #124]	@ (8001888 <MX_GPIO_Init+0xd0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a1e      	ldr	r2, [pc, #120]	@ (8001888 <MX_GPIO_Init+0xd0>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <MX_GPIO_Init+0xd0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <MX_GPIO_Init+0xd0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <MX_GPIO_Init+0xd0>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <MX_GPIO_Init+0xd0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, reset_Pin|cs_Pin|LD2_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2123      	movs	r1, #35	@ 0x23
 8001842:	4812      	ldr	r0, [pc, #72]	@ (800188c <MX_GPIO_Init+0xd4>)
 8001844:	f000 fe5c 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800184e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	@ (8001890 <MX_GPIO_Init+0xd8>)
 8001860:	f000 fcba 	bl	80021d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : reset_Pin cs_Pin LD2_Pin */
  GPIO_InitStruct.Pin = reset_Pin|cs_Pin|LD2_Pin;
 8001864:	2323      	movs	r3, #35	@ 0x23
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	4804      	ldr	r0, [pc, #16]	@ (800188c <MX_GPIO_Init+0xd4>)
 800187c:	f000 fcac 	bl	80021d8 <HAL_GPIO_Init>

}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	@ 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020800 	.word	0x40020800

08001894 <cs_sel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void cs_sel() {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_RESET); //CS LOW
 8001898:	2200      	movs	r2, #0
 800189a:	2102      	movs	r1, #2
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <cs_sel+0x14>)
 800189e:	f000 fe2f 	bl	8002500 <HAL_GPIO_WritePin>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40020000 	.word	0x40020000

080018ac <cs_desel>:

void cs_desel() {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, GPIO_PIN_SET); //CS HIGH
 80018b0:	2201      	movs	r2, #1
 80018b2:	2102      	movs	r1, #2
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <cs_desel+0x14>)
 80018b6:	f000 fe23 	bl	8002500 <HAL_GPIO_WritePin>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40020000 	.word	0x40020000

080018c4 <spi_rb>:

uint8_t spi_rb(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi2, &rbuf, 1, 0xFFFFFFFF);
 80018ca:	1df9      	adds	r1, r7, #7
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
 80018d0:	2201      	movs	r2, #1
 80018d2:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <spi_rb+0x20>)
 80018d4:	f001 fde3 	bl	800349e <HAL_SPI_Receive>
	return rbuf;
 80018d8:	79fb      	ldrb	r3, [r7, #7]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000b8 	.word	0x200000b8

080018e8 <spi_wb>:

void spi_wb(uint8_t b) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &b, 1, 0xFFFFFFFF);
 80018f2:	1df9      	adds	r1, r7, #7
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	2201      	movs	r2, #1
 80018fa:	4803      	ldr	r0, [pc, #12]	@ (8001908 <spi_wb+0x20>)
 80018fc:	f001 fc8b 	bl	8003216 <HAL_SPI_Transmit>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200000b8 	.word	0x200000b8

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f000 fae5 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 f8bd 	bl	8001a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191a:	f7ff ff4d 	bl	80017b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800191e:	f000 fa43 	bl	8001da8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001922:	f000 f929 	bl	8001b78 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8001926:	4949      	ldr	r1, [pc, #292]	@ (8001a4c <main+0x140>)
 8001928:	4849      	ldr	r0, [pc, #292]	@ (8001a50 <main+0x144>)
 800192a:	f7ff fd9b 	bl	8001464 <reg_wizchip_cs_cbfunc>
  reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 800192e:	4949      	ldr	r1, [pc, #292]	@ (8001a54 <main+0x148>)
 8001930:	4849      	ldr	r0, [pc, #292]	@ (8001a58 <main+0x14c>)
 8001932:	f7ff fdbd 	bl	80014b0 <reg_wizchip_spi_cbfunc>

  wizchip_init(bufSize, bufSize);
 8001936:	4949      	ldr	r1, [pc, #292]	@ (8001a5c <main+0x150>)
 8001938:	4848      	ldr	r0, [pc, #288]	@ (8001a5c <main+0x150>)
 800193a:	f7ff fe31 	bl	80015a0 <wizchip_init>
       wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	f8c3 2013 	str.w	r2, [r3, #19]
 8001950:	4a43      	ldr	r2, [pc, #268]	@ (8001a60 <main+0x154>)
 8001952:	463b      	mov	r3, r7
 8001954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001958:	6018      	str	r0, [r3, #0]
 800195a:	3304      	adds	r3, #4
 800195c:	8019      	strh	r1, [r3, #0]
 800195e:	4a41      	ldr	r2, [pc, #260]	@ (8001a64 <main+0x158>)
 8001960:	1dbb      	adds	r3, r7, #6
 8001962:	6810      	ldr	r0, [r2, #0]
 8001964:	6018      	str	r0, [r3, #0]
 8001966:	4a40      	ldr	r2, [pc, #256]	@ (8001a68 <main+0x15c>)
 8001968:	f107 030a 	add.w	r3, r7, #10
 800196c:	6810      	ldr	r0, [r2, #0]
 800196e:	6018      	str	r0, [r3, #0]
 8001970:	4a3e      	ldr	r2, [pc, #248]	@ (8001a6c <main+0x160>)
 8001972:	f107 030e 	add.w	r3, r7, #14
 8001976:	6810      	ldr	r0, [r2, #0]
 8001978:	6018      	str	r0, [r3, #0]
                               .ip 	= {192, 168, 1, 192},					// IP address
                               .sn 	= {255, 255, 255, 0},					// Subnet mask
                               .gw 	= {192, 168, 2, 1}};					// Gateway address
       wizchip_setnetinfo(&netInfo);
 800197a:	463b      	mov	r3, r7
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe9b 	bl	80016b8 <wizchip_setnetinfo>
       wizchip_getnetinfo(&netInfo);
 8001982:	463b      	mov	r3, r7
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fed7 	bl	8001738 <wizchip_getnetinfo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  socket(s,Sn_MR_TCP,45000,SF_TCP_NODELAY);
 800198a:	4b39      	ldr	r3, [pc, #228]	@ (8001a70 <main+0x164>)
 800198c:	7818      	ldrb	r0, [r3, #0]
 800198e:	2320      	movs	r3, #32
 8001990:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8001994:	2101      	movs	r1, #1
 8001996:	f7ff f86b 	bl	8000a70 <socket>

	  while(Baglan!=SOCK_OK){
 800199a:	e00b      	b.n	80019b4 <main+0xa8>
	  		  Baglan=connect_3(s,serverip,45000);
 800199c:	4b34      	ldr	r3, [pc, #208]	@ (8001a70 <main+0x164>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 80019a4:	4933      	ldr	r1, [pc, #204]	@ (8001a74 <main+0x168>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fa04 	bl	8000db4 <connect_W5x00>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <main+0x16c>)
 80019b2:	701a      	strb	r2, [r3, #0]
	  while(Baglan!=SOCK_OK){
 80019b4:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <main+0x16c>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d1ef      	bne.n	800199c <main+0x90>
	  	  }
	  Baglan=0;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001a78 <main+0x16c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

	  send(s,gidenler,gidenler_len);
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <main+0x164>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a7c <main+0x170>)
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	492d      	ldr	r1, [pc, #180]	@ (8001a80 <main+0x174>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff faf7 	bl	8000fc0 <send>

	  while(received_len==0){
 80019d2:	e01d      	b.n	8001a10 <main+0x104>
	 		  if(RSR_len = getSn_RX_RSR(s)>0)
 80019d4:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <main+0x164>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe ff4c 	bl	8000876 <getSn_RX_RSR>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <main+0x178>)
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <main+0x178>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <main+0x104>
	 			  received_len=recv(s,data_buf,RSR_len);
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <main+0x164>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <main+0x178>)
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	4921      	ldr	r1, [pc, #132]	@ (8001a88 <main+0x17c>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fc30 	bl	8001268 <recv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <main+0x180>)
 8001a0e:	701a      	strb	r2, [r3, #0]
	  while(received_len==0){
 8001a10:	4b1e      	ldr	r3, [pc, #120]	@ (8001a8c <main+0x180>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0dd      	beq.n	80019d4 <main+0xc8>
	 	  }

	 	  while(SOCK_OK!=Kop)
 8001a18:	e00b      	b.n	8001a32 <main+0x126>
	 	  {
	 		  Kop=close(s);
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <main+0x164>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f95a 	bl	8000cd8 <close>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <main+0x184>)
 8001a2a:	701a      	strb	r2, [r3, #0]
	 		  Kop=0;
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <main+0x184>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	 	  while(SOCK_OK!=Kop)
 8001a32:	4b17      	ldr	r3, [pc, #92]	@ (8001a90 <main+0x184>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d1ef      	bne.n	8001a1a <main+0x10e>
	 	  }
	  HAL_Delay(25000);
 8001a3a:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 8001a3e:	f000 fac1 	bl	8001fc4 <HAL_Delay>
	 	  received_len=0;
 8001a42:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <main+0x180>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
	  socket(s,Sn_MR_TCP,45000,SF_TCP_NODELAY);
 8001a48:	e79f      	b.n	800198a <main+0x7e>
 8001a4a:	bf00      	nop
 8001a4c:	080018ad 	.word	0x080018ad
 8001a50:	08001895 	.word	0x08001895
 8001a54:	080018e9 	.word	0x080018e9
 8001a58:	080018c5 	.word	0x080018c5
 8001a5c:	20000048 	.word	0x20000048
 8001a60:	080042a0 	.word	0x080042a0
 8001a64:	080042a8 	.word	0x080042a8
 8001a68:	080042ac 	.word	0x080042ac
 8001a6c:	080042b0 	.word	0x080042b0
 8001a70:	20000030 	.word	0x20000030
 8001a74:	20000034 	.word	0x20000034
 8001a78:	20000095 	.word	0x20000095
 8001a7c:	20000046 	.word	0x20000046
 8001a80:	20000038 	.word	0x20000038
 8001a84:	20000097 	.word	0x20000097
 8001a88:	20000098 	.word	0x20000098
 8001a8c:	20000096 	.word	0x20000096
 8001a90:	200000b6 	.word	0x200000b6

08001a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b094      	sub	sp, #80	@ 0x50
 8001a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	2234      	movs	r2, #52	@ 0x34
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fbc4 	bl	8004230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <SystemClock_Config+0xd0>)
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	4a28      	ldr	r2, [pc, #160]	@ (8001b64 <SystemClock_Config+0xd0>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac8:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <SystemClock_Config+0xd0>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	4b23      	ldr	r3, [pc, #140]	@ (8001b68 <SystemClock_Config+0xd4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <SystemClock_Config+0xd4>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <SystemClock_Config+0xd4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001afc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afe:	2302      	movs	r3, #2
 8001b00:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 82;
 8001b0c:	2352      	movs	r3, #82	@ 0x52
 8001b0e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b10:	2302      	movs	r3, #2
 8001b12:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b14:	2302      	movs	r3, #2
 8001b16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 f851 	bl	8002bc8 <HAL_RCC_OscConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b2c:	f000 f81e 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b30:	230f      	movs	r3, #15
 8001b32:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b34:	2302      	movs	r3, #2
 8001b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b40:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f000 fcf1 	bl	8002534 <HAL_RCC_ClockConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b58:	f000 f808 	bl	8001b6c <Error_Handler>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3750      	adds	r7, #80	@ 0x50
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <Error_Handler+0x8>

08001b78 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001b7e:	4a18      	ldr	r2, [pc, #96]	@ (8001be0 <MX_SPI2_Init+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001b84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ba8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbc:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <MX_SPI2_Init+0x64>)
 8001bca:	f001 fa9b 	bl	8003104 <HAL_SPI_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bd4:	f7ff ffca 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200000b8 	.word	0x200000b8
 8001be0:	40003800 	.word	0x40003800

08001be4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	@ 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a30      	ldr	r2, [pc, #192]	@ (8001cc4 <HAL_SPI_MspInit+0xe0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d15a      	bne.n	8001cbc <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c16:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b25      	ldr	r3, [pc, #148]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a20      	ldr	r2, [pc, #128]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_SPI_MspInit+0xe4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	4815      	ldr	r0, [pc, #84]	@ (8001ccc <HAL_SPI_MspInit+0xe8>)
 8001c76:	f000 faaf 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <HAL_SPI_MspInit+0xe8>)
 8001c96:	f000 fa9f 	bl	80021d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cac:	2305      	movs	r3, #5
 8001cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	@ (8001cd0 <HAL_SPI_MspInit+0xec>)
 8001cb8:	f000 fa8e 	bl	80021d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	@ 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40003800 	.word	0x40003800
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001ce4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d12:	2007      	movs	r0, #7
 8001d14:	f000 fa2c 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <NMI_Handler+0x4>

08001d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <BusFault_Handler+0x4>

08001d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <UsageFault_Handler+0x4>

08001d4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7a:	f000 f903 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <SystemInit+0x20>)
 8001d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <SystemInit+0x20>)
 8001d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001dae:	4a12      	ldr	r2, [pc, #72]	@ (8001df8 <MX_USART2_UART_Init+0x50>)
 8001db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001db2:	4b10      	ldr	r3, [pc, #64]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dcc:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001dce:	220c      	movs	r2, #12
 8001dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dde:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_USART2_UART_Init+0x4c>)
 8001de0:	f001 ff62 	bl	8003ca8 <HAL_UART_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dea:	f7ff febf 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000110 	.word	0x20000110
 8001df8:	40004400 	.word	0x40004400

08001dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	@ 0x28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_UART_MspInit+0x84>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d12b      	bne.n	8001e76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_UART_MspInit+0x88>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <HAL_UART_MspInit+0x88>)
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <HAL_UART_MspInit+0x88>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <HAL_UART_MspInit+0x88>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a10      	ldr	r2, [pc, #64]	@ (8001e84 <HAL_UART_MspInit+0x88>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <HAL_UART_MspInit+0x88>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e56:	230c      	movs	r3, #12
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e66:	2307      	movs	r3, #7
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	@ (8001e88 <HAL_UART_MspInit+0x8c>)
 8001e72:	f000 f9b1 	bl	80021d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	@ 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40004400 	.word	0x40004400
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020000 	.word	0x40020000

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e90:	f7ff ff78 	bl	8001d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f002 f9c1 	bl	8004240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff fd25 	bl	800190c <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001ed0:	080042dc 	.word	0x080042dc
  ldr r2, =_sbss
 8001ed4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001ed8:	2000015c 	.word	0x2000015c

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_Init+0x40>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <HAL_Init+0x40>)
 8001eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_Init+0x40>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <HAL_Init+0x40>)
 8001ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <HAL_Init+0x40>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f000 f931 	bl	8002170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff fede 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f93b 	bl	80021be <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f000 f911 	bl	8002186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000004c 	.word	0x2000004c
 8001f7c:	20000054 	.word	0x20000054
 8001f80:	20000050 	.word	0x20000050

08001f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a04      	ldr	r2, [pc, #16]	@ (8001fa8 <HAL_IncTick+0x24>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000054 	.word	0x20000054
 8001fa8:	20000158 	.word	0x20000158

08001fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <HAL_GetTick+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	20000158 	.word	0x20000158

08001fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff ffee 	bl	8001fac <HAL_GetTick>
 8001fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d005      	beq.n	8001fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_Delay+0x44>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fea:	bf00      	nop
 8001fec:	f7ff ffde 	bl	8001fac <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f7      	bhi.n	8001fec <HAL_Delay+0x28>
  {
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000054 	.word	0x20000054

0800200c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002028:	4013      	ands	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203e:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <__NVIC_SetPriorityGrouping+0x44>)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	60d3      	str	r3, [r2, #12]
}
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002058:	4b04      	ldr	r3, [pc, #16]	@ (800206c <__NVIC_GetPriorityGrouping+0x18>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	f003 0307 	and.w	r3, r3, #7
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	@ (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	@ (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	@ 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800213c:	d301      	bcc.n	8002142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213e:	2301      	movs	r3, #1
 8002140:	e00f      	b.n	8002162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002142:	4a0a      	ldr	r2, [pc, #40]	@ (800216c <SysTick_Config+0x40>)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214a:	210f      	movs	r1, #15
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f7ff ff8e 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <SysTick_Config+0x40>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <SysTick_Config+0x40>)
 800215c:	2207      	movs	r2, #7
 800215e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	e000e010 	.word	0xe000e010

08002170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff47 	bl	800200c <__NVIC_SetPriorityGrouping>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	4603      	mov	r3, r0
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002198:	f7ff ff5c 	bl	8002054 <__NVIC_GetPriorityGrouping>
 800219c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68b9      	ldr	r1, [r7, #8]
 80021a2:	6978      	ldr	r0, [r7, #20]
 80021a4:	f7ff ff8e 	bl	80020c4 <NVIC_EncodePriority>
 80021a8:	4602      	mov	r2, r0
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff ff5d 	bl	8002070 <__NVIC_SetPriority>
}
 80021b6:	bf00      	nop
 80021b8:	3718      	adds	r7, #24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff ffb0 	bl	800212c <SysTick_Config>
 80021cc:	4603      	mov	r3, r0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d8:	b480      	push	{r7}
 80021da:	b089      	sub	sp, #36	@ 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	e165      	b.n	80024c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f4:	2201      	movs	r2, #1
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8154 	bne.w	80024ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b01      	cmp	r3, #1
 800221c:	d005      	beq.n	800222a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	2b02      	cmp	r3, #2
 8002228:	d130      	bne.n	800228c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	2203      	movs	r2, #3
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002260:	2201      	movs	r2, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b03      	cmp	r3, #3
 8002296:	d017      	beq.n	80022c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d123      	bne.n	800231c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	08da      	lsrs	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3208      	adds	r2, #8
 80022dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	220f      	movs	r2, #15
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	08da      	lsrs	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3208      	adds	r2, #8
 8002316:	69b9      	ldr	r1, [r7, #24]
 8002318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	2203      	movs	r2, #3
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0203 	and.w	r2, r3, #3
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80ae 	beq.w	80024ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b5d      	ldr	r3, [pc, #372]	@ (80024d8 <HAL_GPIO_Init+0x300>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	4a5c      	ldr	r2, [pc, #368]	@ (80024d8 <HAL_GPIO_Init+0x300>)
 8002368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800236c:	6453      	str	r3, [r2, #68]	@ 0x44
 800236e:	4b5a      	ldr	r3, [pc, #360]	@ (80024d8 <HAL_GPIO_Init+0x300>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237a:	4a58      	ldr	r2, [pc, #352]	@ (80024dc <HAL_GPIO_Init+0x304>)
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	@ (80024e0 <HAL_GPIO_Init+0x308>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d025      	beq.n	80023f2 <HAL_GPIO_Init+0x21a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	@ (80024e4 <HAL_GPIO_Init+0x30c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d01f      	beq.n	80023ee <HAL_GPIO_Init+0x216>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4d      	ldr	r2, [pc, #308]	@ (80024e8 <HAL_GPIO_Init+0x310>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d019      	beq.n	80023ea <HAL_GPIO_Init+0x212>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4c      	ldr	r2, [pc, #304]	@ (80024ec <HAL_GPIO_Init+0x314>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d013      	beq.n	80023e6 <HAL_GPIO_Init+0x20e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a4b      	ldr	r2, [pc, #300]	@ (80024f0 <HAL_GPIO_Init+0x318>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d00d      	beq.n	80023e2 <HAL_GPIO_Init+0x20a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a4a      	ldr	r2, [pc, #296]	@ (80024f4 <HAL_GPIO_Init+0x31c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d007      	beq.n	80023de <HAL_GPIO_Init+0x206>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a49      	ldr	r2, [pc, #292]	@ (80024f8 <HAL_GPIO_Init+0x320>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d101      	bne.n	80023da <HAL_GPIO_Init+0x202>
 80023d6:	2306      	movs	r3, #6
 80023d8:	e00c      	b.n	80023f4 <HAL_GPIO_Init+0x21c>
 80023da:	2307      	movs	r3, #7
 80023dc:	e00a      	b.n	80023f4 <HAL_GPIO_Init+0x21c>
 80023de:	2305      	movs	r3, #5
 80023e0:	e008      	b.n	80023f4 <HAL_GPIO_Init+0x21c>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x21c>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x21c>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x21c>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x21c>
 80023f2:	2300      	movs	r3, #0
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f002 0203 	and.w	r2, r2, #3
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002404:	4935      	ldr	r1, [pc, #212]	@ (80024dc <HAL_GPIO_Init+0x304>)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b3a      	ldr	r3, [pc, #232]	@ (80024fc <HAL_GPIO_Init+0x324>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002436:	4a31      	ldr	r2, [pc, #196]	@ (80024fc <HAL_GPIO_Init+0x324>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <HAL_GPIO_Init+0x324>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002460:	4a26      	ldr	r2, [pc, #152]	@ (80024fc <HAL_GPIO_Init+0x324>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002466:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_GPIO_Init+0x324>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248a:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <HAL_GPIO_Init+0x324>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002490:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <HAL_GPIO_Init+0x324>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b4:	4a11      	ldr	r2, [pc, #68]	@ (80024fc <HAL_GPIO_Init+0x324>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	f67f ae96 	bls.w	80021f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40013800 	.word	0x40013800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40021400 	.word	0x40021400
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800251c:	e003      	b.n	8002526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
	...

08002534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0cc      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b68      	ldr	r3, [pc, #416]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d90c      	bls.n	8002570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b65      	ldr	r3, [pc, #404]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b63      	ldr	r3, [pc, #396]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0b8      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d020      	beq.n	80025be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002588:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a58      	ldr	r2, [pc, #352]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002592:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b50      	ldr	r3, [pc, #320]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	494d      	ldr	r1, [pc, #308]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d044      	beq.n	8002654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b47      	ldr	r3, [pc, #284]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d119      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e07f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d003      	beq.n	80025f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ee:	2b03      	cmp	r3, #3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	4b3f      	ldr	r3, [pc, #252]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e06f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002602:	4b3b      	ldr	r3, [pc, #236]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e067      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002612:	4b37      	ldr	r3, [pc, #220]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 0203 	bic.w	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	4934      	ldr	r1, [pc, #208]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	4313      	orrs	r3, r2
 8002622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002624:	f7ff fcc2 	bl	8001fac <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	e00a      	b.n	8002642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7ff fcbe 	bl	8001fac <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e04f      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	4b2b      	ldr	r3, [pc, #172]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 020c 	and.w	r2, r3, #12
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d1eb      	bne.n	800262c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d20c      	bcs.n	800267c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002662:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266a:	4b20      	ldr	r3, [pc, #128]	@ (80026ec <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d001      	beq.n	800267c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e032      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002688:	4b19      	ldr	r3, [pc, #100]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4916      	ldr	r1, [pc, #88]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a6:	4b12      	ldr	r3, [pc, #72]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	490e      	ldr	r1, [pc, #56]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ba:	f000 f855 	bl	8002768 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490a      	ldr	r1, [pc, #40]	@ (80026f4 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_ClockConfig+0x1c8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fc22 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40023c00 	.word	0x40023c00
 80026f0:	40023800 	.word	0x40023800
 80026f4:	080042b4 	.word	0x080042b4
 80026f8:	2000004c 	.word	0x2000004c
 80026fc:	20000050 	.word	0x20000050

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	@ (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	2000004c 	.word	0x2000004c

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800271c:	f7ff fff0 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0a9b      	lsrs	r3, r3, #10
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	@ (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	080042c4 	.word	0x080042c4

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffdc 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0b5b      	lsrs	r3, r3, #13
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	080042c4 	.word	0x080042c4

08002768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b0ae      	sub	sp, #184	@ 0xb8
 800276e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800278e:	4bcb      	ldr	r3, [pc, #812]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b0c      	cmp	r3, #12
 8002798:	f200 8206 	bhi.w	8002ba8 <HAL_RCC_GetSysClockFreq+0x440>
 800279c:	a201      	add	r2, pc, #4	@ (adr r2, 80027a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a2:	bf00      	nop
 80027a4:	080027d9 	.word	0x080027d9
 80027a8:	08002ba9 	.word	0x08002ba9
 80027ac:	08002ba9 	.word	0x08002ba9
 80027b0:	08002ba9 	.word	0x08002ba9
 80027b4:	080027e1 	.word	0x080027e1
 80027b8:	08002ba9 	.word	0x08002ba9
 80027bc:	08002ba9 	.word	0x08002ba9
 80027c0:	08002ba9 	.word	0x08002ba9
 80027c4:	080027e9 	.word	0x080027e9
 80027c8:	08002ba9 	.word	0x08002ba9
 80027cc:	08002ba9 	.word	0x08002ba9
 80027d0:	08002ba9 	.word	0x08002ba9
 80027d4:	080029d9 	.word	0x080029d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4bb9      	ldr	r3, [pc, #740]	@ (8002ac0 <HAL_RCC_GetSysClockFreq+0x358>)
 80027da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027de:	e1e7      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027e0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ac4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027e6:	e1e3      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e8:	4bb4      	ldr	r3, [pc, #720]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027f4:	4bb1      	ldr	r3, [pc, #708]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d071      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002800:	4bae      	ldr	r3, [pc, #696]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800280c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002818:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002826:	4622      	mov	r2, r4
 8002828:	462b      	mov	r3, r5
 800282a:	f04f 0000 	mov.w	r0, #0
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	0159      	lsls	r1, r3, #5
 8002834:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002838:	0150      	lsls	r0, r2, #5
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4621      	mov	r1, r4
 8002840:	1a51      	subs	r1, r2, r1
 8002842:	6439      	str	r1, [r7, #64]	@ 0x40
 8002844:	4629      	mov	r1, r5
 8002846:	eb63 0301 	sbc.w	r3, r3, r1
 800284a:	647b      	str	r3, [r7, #68]	@ 0x44
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002858:	4649      	mov	r1, r9
 800285a:	018b      	lsls	r3, r1, #6
 800285c:	4641      	mov	r1, r8
 800285e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002862:	4641      	mov	r1, r8
 8002864:	018a      	lsls	r2, r1, #6
 8002866:	4641      	mov	r1, r8
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800286c:	4649      	mov	r1, r9
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002880:	4649      	mov	r1, r9
 8002882:	00cb      	lsls	r3, r1, #3
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800288a:	4641      	mov	r1, r8
 800288c:	00ca      	lsls	r2, r1, #3
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	4603      	mov	r3, r0
 8002894:	4622      	mov	r2, r4
 8002896:	189b      	adds	r3, r3, r2
 8002898:	633b      	str	r3, [r7, #48]	@ 0x30
 800289a:	462b      	mov	r3, r5
 800289c:	460a      	mov	r2, r1
 800289e:	eb42 0303 	adc.w	r3, r2, r3
 80028a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028b0:	4629      	mov	r1, r5
 80028b2:	024b      	lsls	r3, r1, #9
 80028b4:	4621      	mov	r1, r4
 80028b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ba:	4621      	mov	r1, r4
 80028bc:	024a      	lsls	r2, r1, #9
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028c6:	2200      	movs	r2, #0
 80028c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80028d4:	f7fd fc96 	bl	8000204 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028e2:	e067      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e4:	4b75      	ldr	r3, [pc, #468]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	099b      	lsrs	r3, r3, #6
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80028f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028fe:	2300      	movs	r3, #0
 8002900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002902:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	f04f 0000 	mov.w	r0, #0
 800290e:	f04f 0100 	mov.w	r1, #0
 8002912:	0159      	lsls	r1, r3, #5
 8002914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002918:	0150      	lsls	r0, r2, #5
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4621      	mov	r1, r4
 8002920:	1a51      	subs	r1, r2, r1
 8002922:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002924:	4629      	mov	r1, r5
 8002926:	eb63 0301 	sbc.w	r3, r3, r1
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002938:	4649      	mov	r1, r9
 800293a:	018b      	lsls	r3, r1, #6
 800293c:	4641      	mov	r1, r8
 800293e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002942:	4641      	mov	r1, r8
 8002944:	018a      	lsls	r2, r1, #6
 8002946:	4641      	mov	r1, r8
 8002948:	ebb2 0a01 	subs.w	sl, r2, r1
 800294c:	4649      	mov	r1, r9
 800294e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800295e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002962:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002966:	4692      	mov	sl, r2
 8002968:	469b      	mov	fp, r3
 800296a:	4623      	mov	r3, r4
 800296c:	eb1a 0303 	adds.w	r3, sl, r3
 8002970:	623b      	str	r3, [r7, #32]
 8002972:	462b      	mov	r3, r5
 8002974:	eb4b 0303 	adc.w	r3, fp, r3
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002986:	4629      	mov	r1, r5
 8002988:	028b      	lsls	r3, r1, #10
 800298a:	4621      	mov	r1, r4
 800298c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002990:	4621      	mov	r1, r4
 8002992:	028a      	lsls	r2, r1, #10
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800299c:	2200      	movs	r2, #0
 800299e:	673b      	str	r3, [r7, #112]	@ 0x70
 80029a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80029a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80029a6:	f7fd fc2d 	bl	8000204 <__aeabi_uldivmod>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4613      	mov	r3, r2
 80029b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80029b4:	4b41      	ldr	r3, [pc, #260]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	3301      	adds	r3, #1
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80029c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029d6:	e0eb      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d8:	4b38      	ldr	r3, [pc, #224]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e4:	4b35      	ldr	r3, [pc, #212]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d06b      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f0:	4b32      	ldr	r3, [pc, #200]	@ (8002abc <HAL_RCC_GetSysClockFreq+0x354>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	2200      	movs	r2, #0
 80029f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80029fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a02:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a04:	2300      	movs	r3, #0
 8002a06:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a08:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a0c:	4622      	mov	r2, r4
 8002a0e:	462b      	mov	r3, r5
 8002a10:	f04f 0000 	mov.w	r0, #0
 8002a14:	f04f 0100 	mov.w	r1, #0
 8002a18:	0159      	lsls	r1, r3, #5
 8002a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a1e:	0150      	lsls	r0, r2, #5
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4621      	mov	r1, r4
 8002a26:	1a51      	subs	r1, r2, r1
 8002a28:	61b9      	str	r1, [r7, #24]
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	eb63 0301 	sbc.w	r3, r3, r1
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002a3e:	4659      	mov	r1, fp
 8002a40:	018b      	lsls	r3, r1, #6
 8002a42:	4651      	mov	r1, sl
 8002a44:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a48:	4651      	mov	r1, sl
 8002a4a:	018a      	lsls	r2, r1, #6
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	ebb2 0801 	subs.w	r8, r2, r1
 8002a52:	4659      	mov	r1, fp
 8002a54:	eb63 0901 	sbc.w	r9, r3, r1
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a68:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a6c:	4690      	mov	r8, r2
 8002a6e:	4699      	mov	r9, r3
 8002a70:	4623      	mov	r3, r4
 8002a72:	eb18 0303 	adds.w	r3, r8, r3
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	462b      	mov	r3, r5
 8002a7a:	eb49 0303 	adc.w	r3, r9, r3
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	024b      	lsls	r3, r1, #9
 8002a90:	4621      	mov	r1, r4
 8002a92:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a96:	4621      	mov	r1, r4
 8002a98:	024a      	lsls	r2, r1, #9
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002aa6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002aa8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002aac:	f7fd fbaa 	bl	8000204 <__aeabi_uldivmod>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aba:	e065      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0x420>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	00f42400 	.word	0x00f42400
 8002ac4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ada:	2300      	movs	r3, #0
 8002adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ade:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	464b      	mov	r3, r9
 8002ae6:	f04f 0000 	mov.w	r0, #0
 8002aea:	f04f 0100 	mov.w	r1, #0
 8002aee:	0159      	lsls	r1, r3, #5
 8002af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af4:	0150      	lsls	r0, r2, #5
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4641      	mov	r1, r8
 8002afc:	1a51      	subs	r1, r2, r1
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	4649      	mov	r1, r9
 8002b02:	eb63 0301 	sbc.w	r3, r3, r1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b14:	4659      	mov	r1, fp
 8002b16:	018b      	lsls	r3, r1, #6
 8002b18:	4651      	mov	r1, sl
 8002b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b1e:	4651      	mov	r1, sl
 8002b20:	018a      	lsls	r2, r1, #6
 8002b22:	4651      	mov	r1, sl
 8002b24:	1a54      	subs	r4, r2, r1
 8002b26:	4659      	mov	r1, fp
 8002b28:	eb63 0501 	sbc.w	r5, r3, r1
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	00eb      	lsls	r3, r5, #3
 8002b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3a:	00e2      	lsls	r2, r4, #3
 8002b3c:	4614      	mov	r4, r2
 8002b3e:	461d      	mov	r5, r3
 8002b40:	4643      	mov	r3, r8
 8002b42:	18e3      	adds	r3, r4, r3
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	464b      	mov	r3, r9
 8002b48:	eb45 0303 	adc.w	r3, r5, r3
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	f04f 0300 	mov.w	r3, #0
 8002b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	028b      	lsls	r3, r1, #10
 8002b5e:	4621      	mov	r1, r4
 8002b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b64:	4621      	mov	r1, r4
 8002b66:	028a      	lsls	r2, r1, #10
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b70:	2200      	movs	r2, #0
 8002b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b74:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b76:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b7a:	f7fd fb43 	bl	8000204 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4613      	mov	r3, r2
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	0f1b      	lsrs	r3, r3, #28
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002b96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ba6:	e003      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002baa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002bae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	37b8      	adds	r7, #184	@ 0xb8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	00f42400 	.word	0x00f42400

08002bc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e28d      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8083 	beq.w	8002cee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002be8:	4b94      	ldr	r3, [pc, #592]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d019      	beq.n	8002c28 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002bf4:	4b91      	ldr	r3, [pc, #580]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d106      	bne.n	8002c0e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c00:	4b8e      	ldr	r3, [pc, #568]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c0c:	d00c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d112      	bne.n	8002c40 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1a:	4b88      	ldr	r3, [pc, #544]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c26:	d10b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	4b84      	ldr	r3, [pc, #528]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d05b      	beq.n	8002cec <HAL_RCC_OscConfig+0x124>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d157      	bne.n	8002cec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e25a      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCC_OscConfig+0x90>
 8002c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7b      	ldr	r2, [pc, #492]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	e01d      	b.n	8002c94 <HAL_RCC_OscConfig+0xcc>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0xb4>
 8002c62:	4b76      	ldr	r3, [pc, #472]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a75      	ldr	r2, [pc, #468]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	4b73      	ldr	r3, [pc, #460]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a72      	ldr	r2, [pc, #456]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0xcc>
 8002c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6e      	ldr	r2, [pc, #440]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b6c      	ldr	r3, [pc, #432]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7ff f986 	bl	8001fac <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f982 	bl	8001fac <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e21f      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b61      	ldr	r3, [pc, #388]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xdc>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7ff f972 	bl	8001fac <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f96e 	bl	8001fac <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e20b      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	4b57      	ldr	r3, [pc, #348]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x104>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d06f      	beq.n	8002dda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002cfa:	4b50      	ldr	r3, [pc, #320]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d017      	beq.n	8002d36 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d06:	4b4d      	ldr	r3, [pc, #308]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	d105      	bne.n	8002d1e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d12:	4b4a      	ldr	r3, [pc, #296]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00b      	beq.n	8002d36 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1e:	4b47      	ldr	r3, [pc, #284]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d11c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2a:	4b44      	ldr	r3, [pc, #272]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d116      	bne.n	8002d64 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	4b41      	ldr	r3, [pc, #260]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_RCC_OscConfig+0x186>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1d3      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4937      	ldr	r1, [pc, #220]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d62:	e03a      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d020      	beq.n	8002dae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d6c:	4b34      	ldr	r3, [pc, #208]	@ (8002e40 <HAL_RCC_OscConfig+0x278>)
 8002d6e:	2201      	movs	r2, #1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7ff f91b 	bl	8001fac <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7ff f917 	bl	8001fac <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e1b4      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d98:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4925      	ldr	r1, [pc, #148]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
 8002dac:	e015      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_RCC_OscConfig+0x278>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7ff f8fa 	bl	8001fac <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7ff f8f6 	bl	8001fac <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e193      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d036      	beq.n	8002e54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	2201      	movs	r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7ff f8da 	bl	8001fac <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7ff f8d6 	bl	8001fac <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e173      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_RCC_OscConfig+0x274>)
 8002e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0x234>
 8002e1a:	e01b      	b.n	8002e54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e22:	f7ff f8c3 	bl	8001fac <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e28:	e00e      	b.n	8002e48 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7ff f8bf 	bl	8001fac <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d907      	bls.n	8002e48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e15c      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	42470000 	.word	0x42470000
 8002e44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e48:	4b8a      	ldr	r3, [pc, #552]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1ea      	bne.n	8002e2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8097 	beq.w	8002f90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b83      	ldr	r3, [pc, #524]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b7f      	ldr	r3, [pc, #508]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e82:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b79      	ldr	r3, [pc, #484]	@ (8003078 <HAL_RCC_OscConfig+0x4b0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b76      	ldr	r3, [pc, #472]	@ (8003078 <HAL_RCC_OscConfig+0x4b0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	@ (8003078 <HAL_RCC_OscConfig+0x4b0>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7ff f87f 	bl	8001fac <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7ff f87b 	bl	8001fac <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e118      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8003078 <HAL_RCC_OscConfig+0x4b0>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x31e>
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCC_OscConfig+0x358>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x340>
 8002eee:	4b61      	ldr	r3, [pc, #388]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	4a60      	ldr	r2, [pc, #384]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002ef4:	f043 0304 	orr.w	r3, r3, #4
 8002ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efa:	4b5e      	ldr	r3, [pc, #376]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efe:	4a5d      	ldr	r2, [pc, #372]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0x358>
 8002f08:	4b5a      	ldr	r3, [pc, #360]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0c:	4a59      	ldr	r2, [pc, #356]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f14:	4b57      	ldr	r3, [pc, #348]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f18:	4a56      	ldr	r2, [pc, #344]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f1a:	f023 0304 	bic.w	r3, r3, #4
 8002f1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d015      	beq.n	8002f54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7ff f840 	bl	8001fac <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7ff f83c 	bl	8001fac <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0d7      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	4b4b      	ldr	r3, [pc, #300]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ee      	beq.n	8002f30 <HAL_RCC_OscConfig+0x368>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7ff f82a 	bl	8001fac <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5c:	f7ff f826 	bl	8001fac <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0c1      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	4b40      	ldr	r3, [pc, #256]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f7e:	7dfb      	ldrb	r3, [r7, #23]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f84:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	4a3a      	ldr	r2, [pc, #232]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80ad 	beq.w	80030f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9a:	4b36      	ldr	r3, [pc, #216]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d060      	beq.n	8003068 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d145      	bne.n	800303a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b33      	ldr	r3, [pc, #204]	@ (800307c <HAL_RCC_OscConfig+0x4b4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fffa 	bl	8001fac <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fe fff6 	bl	8001fac <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e093      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	019b      	lsls	r3, r3, #6
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	071b      	lsls	r3, r3, #28
 8003006:	491b      	ldr	r1, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b1b      	ldr	r3, [pc, #108]	@ (800307c <HAL_RCC_OscConfig+0x4b4>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe ffcb 	bl	8001fac <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe ffc7 	bl	8001fac <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e064      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x452>
 8003038:	e05c      	b.n	80030f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_RCC_OscConfig+0x4b4>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe ffb4 	bl	8001fac <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003048:	f7fe ffb0 	bl	8001fac <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e04d      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_OscConfig+0x4ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x480>
 8003066:	e045      	b.n	80030f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e040      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000
 800307c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003080:	4b1f      	ldr	r3, [pc, #124]	@ (8003100 <HAL_RCC_OscConfig+0x538>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d030      	beq.n	80030f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d129      	bne.n	80030f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d122      	bne.n	80030f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d119      	bne.n	80030f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d10f      	bne.n	80030f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e07b      	b.n	800320e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d108      	bne.n	8003130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003126:	d009      	beq.n	800313c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
 800312e:	e005      	b.n	800313c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fd44 	bl	8001be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c0:	ea42 0103 	orr.w	r1, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	f003 0104 	and.w	r1, r3, #4
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	f003 0210 	and.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	69da      	ldr	r2, [r3, #28]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b088      	sub	sp, #32
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003226:	f7fe fec1 	bl	8001fac <HAL_GetTick>
 800322a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	e12a      	b.n	8003496 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_SPI_Transmit+0x36>
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e122      	b.n	8003496 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_SPI_Transmit+0x48>
 800325a:	2302      	movs	r3, #2
 800325c:	e11b      	b.n	8003496 <HAL_SPI_Transmit+0x280>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	88fa      	ldrh	r2, [r7, #6]
 800327e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ac:	d10f      	bne.n	80032ce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	d007      	beq.n	80032ec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032f4:	d152      	bne.n	800339c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_SPI_Transmit+0xee>
 80032fe:	8b7b      	ldrh	r3, [r7, #26]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d145      	bne.n	8003390 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	881a      	ldrh	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	1c9a      	adds	r2, r3, #2
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003328:	e032      	b.n	8003390 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b02      	cmp	r3, #2
 8003336:	d112      	bne.n	800335e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333c:	881a      	ldrh	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800335c:	e018      	b.n	8003390 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800335e:	f7fe fe25 	bl	8001fac <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d803      	bhi.n	8003376 <HAL_SPI_Transmit+0x160>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d102      	bne.n	800337c <HAL_SPI_Transmit+0x166>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e082      	b.n	8003496 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003394:	b29b      	uxth	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1c7      	bne.n	800332a <HAL_SPI_Transmit+0x114>
 800339a:	e053      	b.n	8003444 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <HAL_SPI_Transmit+0x194>
 80033a4:	8b7b      	ldrh	r3, [r7, #26]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d147      	bne.n	800343a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	330c      	adds	r3, #12
 80033b4:	7812      	ldrb	r2, [r2, #0]
 80033b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033d0:	e033      	b.n	800343a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d113      	bne.n	8003408 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	7812      	ldrb	r2, [r2, #0]
 80033ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003406:	e018      	b.n	800343a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003408:	f7fe fdd0 	bl	8001fac <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d803      	bhi.n	8003420 <HAL_SPI_Transmit+0x20a>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341e:	d102      	bne.n	8003426 <HAL_SPI_Transmit+0x210>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e02d      	b.n	8003496 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1c6      	bne.n	80033d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fbd9 	bl	8003c00 <SPI_EndRxTxTransaction>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003462:	2300      	movs	r3, #0
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003494:	2300      	movs	r3, #0
  }
}
 8003496:	4618      	mov	r0, r3
 8003498:	3720      	adds	r7, #32
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b088      	sub	sp, #32
 80034a2:	af02      	add	r7, sp, #8
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
 80034bc:	e104      	b.n	80036c8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_SPI_Receive+0x2c>
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0fc      	b.n	80036c8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034d6:	d112      	bne.n	80034fe <HAL_SPI_Receive+0x60>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10e      	bne.n	80034fe <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80034e8:	88fa      	ldrh	r2, [r7, #6]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f8eb 	bl	80036d0 <HAL_SPI_TransmitReceive>
 80034fa:	4603      	mov	r3, r0
 80034fc:	e0e4      	b.n	80036c8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034fe:	f7fe fd55 	bl	8001fac <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_SPI_Receive+0x74>
 800350e:	2302      	movs	r3, #2
 8003510:	e0da      	b.n	80036c8 <HAL_SPI_Receive+0x22a>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2204      	movs	r2, #4
 800351e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	88fa      	ldrh	r2, [r7, #6]
 8003532:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003560:	d10f      	bne.n	8003582 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003580:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d007      	beq.n	80035a0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d170      	bne.n	800368a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80035a8:	e035      	b.n	8003616 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d115      	bne.n	80035e4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f103 020c 	add.w	r2, r3, #12
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c4:	7812      	ldrb	r2, [r2, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ce:	1c5a      	adds	r2, r3, #1
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035e2:	e018      	b.n	8003616 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035e4:	f7fe fce2 	bl	8001fac <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d803      	bhi.n	80035fc <HAL_SPI_Receive+0x15e>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fa:	d102      	bne.n	8003602 <HAL_SPI_Receive+0x164>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e058      	b.n	80036c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1c4      	bne.n	80035aa <HAL_SPI_Receive+0x10c>
 8003620:	e038      	b.n	8003694 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d113      	bne.n	8003658 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363a:	b292      	uxth	r2, r2
 800363c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	1c9a      	adds	r2, r3, #2
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364c:	b29b      	uxth	r3, r3
 800364e:	3b01      	subs	r3, #1
 8003650:	b29a      	uxth	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003656:	e018      	b.n	800368a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003658:	f7fe fca8 	bl	8001fac <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d803      	bhi.n	8003670 <HAL_SPI_Receive+0x1d2>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d102      	bne.n	8003676 <HAL_SPI_Receive+0x1d8>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e01e      	b.n	80036c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1c6      	bne.n	8003622 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	6839      	ldr	r1, [r7, #0]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 fa4b 	bl	8003b34 <SPI_EndRxTransaction>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80036c6:	2300      	movs	r3, #0
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80036de:	2301      	movs	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036e2:	f7fe fc63 	bl	8001fac <HAL_GetTick>
 80036e6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ee:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036fa:	7ffb      	ldrb	r3, [r7, #31]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d00c      	beq.n	800371a <HAL_SPI_TransmitReceive+0x4a>
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003706:	d106      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x46>
 8003710:	7ffb      	ldrb	r3, [r7, #31]
 8003712:	2b04      	cmp	r3, #4
 8003714:	d001      	beq.n	800371a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
 8003718:	e17f      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_SPI_TransmitReceive+0x5c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <HAL_SPI_TransmitReceive+0x5c>
 8003726:	887b      	ldrh	r3, [r7, #2]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e174      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_SPI_TransmitReceive+0x6e>
 800373a:	2302      	movs	r3, #2
 800373c:	e16d      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x34a>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b04      	cmp	r3, #4
 8003750:	d003      	beq.n	800375a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2205      	movs	r2, #5
 8003756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	887a      	ldrh	r2, [r7, #2]
 800376a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	887a      	ldrh	r2, [r7, #2]
 8003782:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d007      	beq.n	80037ae <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037b6:	d17e      	bne.n	80038b6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0xf6>
 80037c0:	8afb      	ldrh	r3, [r7, #22]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d16c      	bne.n	80038a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	1c9a      	adds	r2, r3, #2
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ea:	e059      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d11b      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x162>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d016      	beq.n	8003832 <HAL_SPI_TransmitReceive+0x162>
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	2b01      	cmp	r3, #1
 8003808:	d113      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	881a      	ldrh	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	1c9a      	adds	r2, r3, #2
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d119      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x1a4>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d014      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	b292      	uxth	r2, r2
 8003856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385c:	1c9a      	adds	r2, r3, #2
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003870:	2301      	movs	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003874:	f7fe fb9a 	bl	8001fac <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003880:	429a      	cmp	r2, r3
 8003882:	d80d      	bhi.n	80038a0 <HAL_SPI_TransmitReceive+0x1d0>
 8003884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d009      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e0bc      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1a0      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x11c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d19b      	bne.n	80037ec <HAL_SPI_TransmitReceive+0x11c>
 80038b4:	e082      	b.n	80039bc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_TransmitReceive+0x1f4>
 80038be:	8afb      	ldrh	r3, [r7, #22]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d171      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ea:	e05d      	b.n	80039a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d11c      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x264>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d017      	beq.n	8003934 <HAL_SPI_TransmitReceive+0x264>
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	2b01      	cmp	r3, #1
 8003908:	d114      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d119      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x2a6>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d014      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003968:	b29b      	uxth	r3, r3
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003972:	2301      	movs	r3, #1
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003976:	f7fe fb19 	bl	8001fac <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003982:	429a      	cmp	r2, r3
 8003984:	d803      	bhi.n	800398e <HAL_SPI_TransmitReceive+0x2be>
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d102      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x2c4>
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e038      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d19c      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x21c>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d197      	bne.n	80038ec <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f91d 	bl	8003c00 <SPI_EndRxTxTransaction>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e01d      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
 80039fa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3728      	adds	r7, #40	@ 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a34:	f7fe faba 	bl	8001fac <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a44:	f7fe fab2 	bl	8001fac <HAL_GetTick>
 8003a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a4a:	4b39      	ldr	r3, [pc, #228]	@ (8003b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	015b      	lsls	r3, r3, #5
 8003a50:	0d1b      	lsrs	r3, r3, #20
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	fb02 f303 	mul.w	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a5a:	e055      	b.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d051      	beq.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a64:	f7fe faa2 	bl	8001fac <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d902      	bls.n	8003a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d13d      	bne.n	8003af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a92:	d111      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a9c:	d004      	beq.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa6:	d107      	bne.n	8003ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac0:	d10f      	bne.n	8003ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e018      	b.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e002      	b.n	8003b08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d19a      	bne.n	8003a5c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	2000004c 	.word	0x2000004c

08003b34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b48:	d111      	bne.n	8003b6e <SPI_EndRxTransaction+0x3a>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b52:	d004      	beq.n	8003b5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5c:	d107      	bne.n	8003b6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b76:	d12a      	bne.n	8003bce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b80:	d012      	beq.n	8003ba8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2180      	movs	r1, #128	@ 0x80
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff49 	bl	8003a24 <SPI_WaitFlagStateUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02d      	beq.n	8003bf4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e026      	b.n	8003bf6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff ff36 	bl	8003a24 <SPI_WaitFlagStateUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01a      	beq.n	8003bf4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e013      	b.n	8003bf6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff ff23 	bl	8003a24 <SPI_WaitFlagStateUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d007      	beq.n	8003bf4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be8:	f043 0220 	orr.w	r2, r3, #32
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e000      	b.n	8003bf6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2201      	movs	r2, #1
 8003c14:	2102      	movs	r1, #2
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f7ff ff04 	bl	8003a24 <SPI_WaitFlagStateUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c26:	f043 0220 	orr.w	r2, r3, #32
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e032      	b.n	8003c98 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca0 <SPI_EndRxTxTransaction+0xa0>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <SPI_EndRxTxTransaction+0xa4>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	0d5b      	lsrs	r3, r3, #21
 8003c3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c50:	d112      	bne.n	8003c78 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2180      	movs	r1, #128	@ 0x80
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff fee1 	bl	8003a24 <SPI_WaitFlagStateUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d016      	beq.n	8003c96 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e00f      	b.n	8003c98 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8e:	2b80      	cmp	r3, #128	@ 0x80
 8003c90:	d0f2      	beq.n	8003c78 <SPI_EndRxTxTransaction+0x78>
 8003c92:	e000      	b.n	8003c96 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c94:	bf00      	nop
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	2000004c 	.word	0x2000004c
 8003ca4:	165e9f81 	.word	0x165e9f81

08003ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e042      	b.n	8003d40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fe f894 	bl	8001dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	@ 0x24
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f82b 	bl	8003d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b0c0      	sub	sp, #256	@ 0x100
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	68d9      	ldr	r1, [r3, #12]
 8003d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	ea40 0301 	orr.w	r3, r0, r1
 8003d70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003da0:	f021 010c 	bic.w	r1, r1, #12
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003dae:	430b      	orrs	r3, r1
 8003db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	6999      	ldr	r1, [r3, #24]
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	ea40 0301 	orr.w	r3, r0, r1
 8003dce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b8f      	ldr	r3, [pc, #572]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d005      	beq.n	8003de8 <UART_SetConfig+0xa0>
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b8d      	ldr	r3, [pc, #564]	@ (8004018 <UART_SetConfig+0x2d0>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d104      	bne.n	8003df2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7fe fcaa 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8003dec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003df0:	e003      	b.n	8003dfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7fe fc91 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8003df6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e04:	f040 810c 	bne.w	8004020 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	462b      	mov	r3, r5
 8003e1e:	1891      	adds	r1, r2, r2
 8003e20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e22:	415b      	adcs	r3, r3
 8003e24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	eb12 0801 	adds.w	r8, r2, r1
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb43 0901 	adc.w	r9, r3, r1
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e4a:	4690      	mov	r8, r2
 8003e4c:	4699      	mov	r9, r3
 8003e4e:	4623      	mov	r3, r4
 8003e50:	eb18 0303 	adds.w	r3, r8, r3
 8003e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e58:	462b      	mov	r3, r5
 8003e5a:	eb49 0303 	adc.w	r3, r9, r3
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e76:	460b      	mov	r3, r1
 8003e78:	18db      	adds	r3, r3, r3
 8003e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	eb42 0303 	adc.w	r3, r2, r3
 8003e82:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e8c:	f7fc f9ba 	bl	8000204 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b61      	ldr	r3, [pc, #388]	@ (800401c <UART_SetConfig+0x2d4>)
 8003e96:	fba3 2302 	umull	r2, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	011c      	lsls	r4, r3, #4
 8003e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003eac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	1891      	adds	r1, r2, r2
 8003eb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eb8:	415b      	adcs	r3, r3
 8003eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ebc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ee0:	4692      	mov	sl, r2
 8003ee2:	469b      	mov	fp, r3
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	18db      	adds	r3, r3, r3
 8003f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f12:	4613      	mov	r3, r2
 8003f14:	eb42 0303 	adc.w	r3, r2, r3
 8003f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f22:	f7fc f96f 	bl	8000204 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <UART_SetConfig+0x2d4>)
 8003f2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2264      	movs	r2, #100	@ 0x64
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	1acb      	subs	r3, r1, r3
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f42:	4b36      	ldr	r3, [pc, #216]	@ (800401c <UART_SetConfig+0x2d4>)
 8003f44:	fba3 2302 	umull	r2, r3, r3, r2
 8003f48:	095b      	lsrs	r3, r3, #5
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f50:	441c      	add	r4, r3
 8003f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f64:	4642      	mov	r2, r8
 8003f66:	464b      	mov	r3, r9
 8003f68:	1891      	adds	r1, r2, r2
 8003f6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f6c:	415b      	adcs	r3, r3
 8003f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f74:	4641      	mov	r1, r8
 8003f76:	1851      	adds	r1, r2, r1
 8003f78:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	414b      	adcs	r3, r1
 8003f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	f04f 0300 	mov.w	r3, #0
 8003f88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f8c:	4659      	mov	r1, fp
 8003f8e:	00cb      	lsls	r3, r1, #3
 8003f90:	4651      	mov	r1, sl
 8003f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f96:	4651      	mov	r1, sl
 8003f98:	00ca      	lsls	r2, r1, #3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa8:	464b      	mov	r3, r9
 8003faa:	460a      	mov	r2, r1
 8003fac:	eb42 0303 	adc.w	r3, r2, r3
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc8:	460b      	mov	r3, r1
 8003fca:	18db      	adds	r3, r3, r3
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fce:	4613      	mov	r3, r2
 8003fd0:	eb42 0303 	adc.w	r3, r2, r3
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fde:	f7fc f911 	bl	8000204 <__aeabi_uldivmod>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800401c <UART_SetConfig+0x2d4>)
 8003fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	2164      	movs	r1, #100	@ 0x64
 8003ff0:	fb01 f303 	mul.w	r3, r1, r3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	3332      	adds	r3, #50	@ 0x32
 8003ffa:	4a08      	ldr	r2, [pc, #32]	@ (800401c <UART_SetConfig+0x2d4>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	f003 0207 	and.w	r2, r3, #7
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4422      	add	r2, r4
 800400e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004010:	e106      	b.n	8004220 <UART_SetConfig+0x4d8>
 8004012:	bf00      	nop
 8004014:	40011000 	.word	0x40011000
 8004018:	40011400 	.word	0x40011400
 800401c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800402a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800402e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004032:	4642      	mov	r2, r8
 8004034:	464b      	mov	r3, r9
 8004036:	1891      	adds	r1, r2, r2
 8004038:	6239      	str	r1, [r7, #32]
 800403a:	415b      	adcs	r3, r3
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
 800403e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004042:	4641      	mov	r1, r8
 8004044:	1854      	adds	r4, r2, r1
 8004046:	4649      	mov	r1, r9
 8004048:	eb43 0501 	adc.w	r5, r3, r1
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	00eb      	lsls	r3, r5, #3
 8004056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405a:	00e2      	lsls	r2, r4, #3
 800405c:	4614      	mov	r4, r2
 800405e:	461d      	mov	r5, r3
 8004060:	4643      	mov	r3, r8
 8004062:	18e3      	adds	r3, r4, r3
 8004064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004068:	464b      	mov	r3, r9
 800406a:	eb45 0303 	adc.w	r3, r5, r3
 800406e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800407e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800408e:	4629      	mov	r1, r5
 8004090:	008b      	lsls	r3, r1, #2
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004098:	4621      	mov	r1, r4
 800409a:	008a      	lsls	r2, r1, #2
 800409c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80040a0:	f7fc f8b0 	bl	8000204 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4b60      	ldr	r3, [pc, #384]	@ (800422c <UART_SetConfig+0x4e4>)
 80040aa:	fba3 2302 	umull	r2, r3, r3, r2
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	011c      	lsls	r4, r3, #4
 80040b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b6:	2200      	movs	r2, #0
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	1891      	adds	r1, r2, r2
 80040ca:	61b9      	str	r1, [r7, #24]
 80040cc:	415b      	adcs	r3, r3
 80040ce:	61fb      	str	r3, [r7, #28]
 80040d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d4:	4641      	mov	r1, r8
 80040d6:	1851      	adds	r1, r2, r1
 80040d8:	6139      	str	r1, [r7, #16]
 80040da:	4649      	mov	r1, r9
 80040dc:	414b      	adcs	r3, r1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040ec:	4659      	mov	r1, fp
 80040ee:	00cb      	lsls	r3, r1, #3
 80040f0:	4651      	mov	r1, sl
 80040f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f6:	4651      	mov	r1, sl
 80040f8:	00ca      	lsls	r2, r1, #3
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	189b      	adds	r3, r3, r2
 8004104:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004108:	464b      	mov	r3, r9
 800410a:	460a      	mov	r2, r1
 800410c:	eb42 0303 	adc.w	r3, r2, r3
 8004110:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800411e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800412c:	4649      	mov	r1, r9
 800412e:	008b      	lsls	r3, r1, #2
 8004130:	4641      	mov	r1, r8
 8004132:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004136:	4641      	mov	r1, r8
 8004138:	008a      	lsls	r2, r1, #2
 800413a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800413e:	f7fc f861 	bl	8000204 <__aeabi_uldivmod>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4611      	mov	r1, r2
 8004148:	4b38      	ldr	r3, [pc, #224]	@ (800422c <UART_SetConfig+0x4e4>)
 800414a:	fba3 2301 	umull	r2, r3, r3, r1
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2264      	movs	r2, #100	@ 0x64
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	1acb      	subs	r3, r1, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	@ 0x32
 800415c:	4a33      	ldr	r2, [pc, #204]	@ (800422c <UART_SetConfig+0x4e4>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004168:	441c      	add	r4, r3
 800416a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416e:	2200      	movs	r2, #0
 8004170:	673b      	str	r3, [r7, #112]	@ 0x70
 8004172:	677a      	str	r2, [r7, #116]	@ 0x74
 8004174:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	1891      	adds	r1, r2, r2
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	415b      	adcs	r3, r3
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004188:	4641      	mov	r1, r8
 800418a:	1851      	adds	r1, r2, r1
 800418c:	6039      	str	r1, [r7, #0]
 800418e:	4649      	mov	r1, r9
 8004190:	414b      	adcs	r3, r1
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041a0:	4659      	mov	r1, fp
 80041a2:	00cb      	lsls	r3, r1, #3
 80041a4:	4651      	mov	r1, sl
 80041a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041aa:	4651      	mov	r1, sl
 80041ac:	00ca      	lsls	r2, r1, #3
 80041ae:	4610      	mov	r0, r2
 80041b0:	4619      	mov	r1, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	4642      	mov	r2, r8
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ba:	464b      	mov	r3, r9
 80041bc:	460a      	mov	r2, r1
 80041be:	eb42 0303 	adc.w	r3, r2, r3
 80041c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041dc:	4649      	mov	r1, r9
 80041de:	008b      	lsls	r3, r1, #2
 80041e0:	4641      	mov	r1, r8
 80041e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e6:	4641      	mov	r1, r8
 80041e8:	008a      	lsls	r2, r1, #2
 80041ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ee:	f7fc f809 	bl	8000204 <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4b0d      	ldr	r3, [pc, #52]	@ (800422c <UART_SetConfig+0x4e4>)
 80041f8:	fba3 1302 	umull	r1, r3, r3, r2
 80041fc:	095b      	lsrs	r3, r3, #5
 80041fe:	2164      	movs	r1, #100	@ 0x64
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	3332      	adds	r3, #50	@ 0x32
 800420a:	4a08      	ldr	r2, [pc, #32]	@ (800422c <UART_SetConfig+0x4e4>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4422      	add	r2, r4
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004226:	46bd      	mov	sp, r7
 8004228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800422c:	51eb851f 	.word	0x51eb851f

08004230 <memset>:
 8004230:	4402      	add	r2, r0
 8004232:	4603      	mov	r3, r0
 8004234:	4293      	cmp	r3, r2
 8004236:	d100      	bne.n	800423a <memset+0xa>
 8004238:	4770      	bx	lr
 800423a:	f803 1b01 	strb.w	r1, [r3], #1
 800423e:	e7f9      	b.n	8004234 <memset+0x4>

08004240 <__libc_init_array>:
 8004240:	b570      	push	{r4, r5, r6, lr}
 8004242:	4d0d      	ldr	r5, [pc, #52]	@ (8004278 <__libc_init_array+0x38>)
 8004244:	4c0d      	ldr	r4, [pc, #52]	@ (800427c <__libc_init_array+0x3c>)
 8004246:	1b64      	subs	r4, r4, r5
 8004248:	10a4      	asrs	r4, r4, #2
 800424a:	2600      	movs	r6, #0
 800424c:	42a6      	cmp	r6, r4
 800424e:	d109      	bne.n	8004264 <__libc_init_array+0x24>
 8004250:	4d0b      	ldr	r5, [pc, #44]	@ (8004280 <__libc_init_array+0x40>)
 8004252:	4c0c      	ldr	r4, [pc, #48]	@ (8004284 <__libc_init_array+0x44>)
 8004254:	f000 f818 	bl	8004288 <_init>
 8004258:	1b64      	subs	r4, r4, r5
 800425a:	10a4      	asrs	r4, r4, #2
 800425c:	2600      	movs	r6, #0
 800425e:	42a6      	cmp	r6, r4
 8004260:	d105      	bne.n	800426e <__libc_init_array+0x2e>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	f855 3b04 	ldr.w	r3, [r5], #4
 8004268:	4798      	blx	r3
 800426a:	3601      	adds	r6, #1
 800426c:	e7ee      	b.n	800424c <__libc_init_array+0xc>
 800426e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004272:	4798      	blx	r3
 8004274:	3601      	adds	r6, #1
 8004276:	e7f2      	b.n	800425e <__libc_init_array+0x1e>
 8004278:	080042d4 	.word	0x080042d4
 800427c:	080042d4 	.word	0x080042d4
 8004280:	080042d4 	.word	0x080042d4
 8004284:	080042d8 	.word	0x080042d8

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
